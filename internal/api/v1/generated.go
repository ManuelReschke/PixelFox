// Package apiv1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package apiv1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v2"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Error defines model for Error.
type Error struct {
	// Details Additional error details
	Details *string `json:"details,omitempty"`

	// Error Error type identifier
	Error string `json:"error"`

	// Message Human-readable error message
	Message string `json:"message"`
}

// Pong defines model for Pong.
type Pong struct {
	// Ping Simple response confirming API availability
	Ping string `json:"ping"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Health check endpoint
	// (GET /ping)
	GetPing(c *fiber.Ctx) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// GetPing operation middleware
func (siw *ServerInterfaceWrapper) GetPing(c *fiber.Ctx) error {

	c.Context().SetUserValue(ApiKeyAuthScopes, []string{})

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetPing(c)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Get(options.BaseURL+"/ping", wrapper.GetPing)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xV34vjNhD+V8S0j74421I4/JZyvTZ3lIbuliss4ZjIY1u3sqRKckhY/L+Xke0k3hj6",
	"0jfF8+P7ZuabyStI2zpryMQAxSsE2VCL6fmL99bzw3nryEdF6XNJEZUen0F65aKyBgrYlKXiJ2pBHCom",
	"zwzohK3TBAV8wIgHDCSkNYYk+4sKlaYSMohnxz4hemVq6DOgicIcKTET7C1USSaqSpGfwSgTyRvUXwP5",
	"I/mvQ6IFhJZCwJruMX7rWjTvPGGJB01jRZP3LdTGiM7QyZGMVI5+VsrO+6Wa+gw8/dMpNhbPMPGaEu8v",
	"AfbwjWRkijtr6vsxODV8nbN+VMxKeArOmqHLlfKtMrXY7LYCj6g0HpRW8TwrwjHGf5FNkPcM+wwCyc6r",
	"eH5k9Qz8Nk59pvOmi82CUnZb8UJnUVkvsIsNj1BiMmag2KMhLNNIDbaM9fe7zW777jOdryQxAXCDfib0",
	"5CeoQ/r10foWIxTw6csTZG/wP315EtG+kLlHT/rn9EOaK1wTo4Oei1WmsgwkrYkoIz9Hljt1Iv3RnlKv",
	"HzvnrI+QQef1mCAUee7YqbKnlZRMfs7sj6pSUqFOGbg9l5SqxZpEaJBHI5zGWFnfQgZaSTKBbmj8vn26",
	"Q7WOTLCdl7Syvs7HoJCzb59BVFHfVrCSMlE4PkAGR/JhoPewWq/W7M/p0Cko4Mf0KQOHsUmDzydl1hTv",
	"R/8nxc6bIFCEQaqsvKteoxVH8qo6L8mV5Z/mtC2hgF8p7lRS7RSd4H9Yr6fhkEkE0Dk9Djj/FpjFdOb4",
	"9b2nCgr4Lr/ewXw8gnnavDTzN1vWSUkhVJ0WDaGOjZANyZdLGdyhn/5HHsMlXiCyHc+cGM7ccH2Gjeza",
	"Fv2ZD9ktQzKls8qwKiPWgbd6sMO+v11kKJ7nK/y877PX2aY97/s9BzBwSP5zbh/oSNq6lkwc6c1EWeS5",
	"thJ1Y0Ms3q/fr3N0Kj8+AOPMM+28Lbvhr2Ih0ZuduqTZX0q8O+1LHQnXYzN25J7INu1giwZr4rquIckS",
	"FkL+CuQXI9iwFLDRh65djEiWAP2+/zcAAP//B+pdVbUHAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

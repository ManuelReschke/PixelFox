// Package apiv1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package apiv1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	ApiKeyAuthScopes      = "ApiKeyAuth.Scopes"
	BearerAuthScopes      = "BearerAuth.Scopes"
	UploadTokenAuthScopes = "UploadTokenAuth.Scopes"
)

// Error defines model for Error.
type Error struct {
	// Details Additional error details
	Details *string `json:"details,omitempty"`

	// Error Error type identifier
	Error string `json:"error"`

	// Message Human-readable error message
	Message string `json:"message"`
}

// Pong defines model for Pong.
type Pong struct {
	// Ping Simple response confirming API availability
	Ping string `json:"ping"`
}

// StorageUploadResponse defines model for StorageUploadResponse.
type StorageUploadResponse struct {
	Duplicate *bool   `json:"duplicate,omitempty"`
	ImageUuid *string `json:"image_uuid,omitempty"`
	ViewUrl   *string `json:"view_url,omitempty"`
}

// UploadSessionRequest defines model for UploadSessionRequest.
type UploadSessionRequest struct {
	// FileSize Größe der Datei in Bytes.
	FileSize int64 `json:"file_size"`
}

// UploadSessionResponse defines model for UploadSessionResponse.
type UploadSessionResponse struct {
	// ExpiresAt Ablaufzeit als Unix-Timestamp (Sekunden).
	ExpiresAt int64 `json:"expires_at"`

	// MaxBytes Maximale Dateigröße in Bytes, die mit diesem Token akzeptiert wird.
	MaxBytes int64 `json:"max_bytes"`

	// PoolId Interne ID des Storage-Pools.
	PoolId int64 `json:"pool_id"`

	// Token Zeitlich begrenzter Upload-Token (Bearer Token).
	Token string `json:"token"`

	// UploadUrl Vollständige URL zum Storage-Endpunkt.
	UploadUrl string `json:"upload_url"`
}

// UserAccount defines model for UserAccount.
type UserAccount struct {
	// ApiKeyLastUsedAt Letzte Verwendung des aktuellen API-Schlüssels
	ApiKeyLastUsedAt *time.Time `json:"api_key_last_used_at"`

	// CreatedAt Registrierungszeitpunkt
	CreatedAt time.Time `json:"created_at"`

	// Email Verknüpfte E-Mail-Adresse
	Email openapi_types.Email `json:"email"`

	// Id Benutzer-ID
	Id int64 `json:"id"`

	// LastLoginAt Zeitpunkt der letzten Anmeldung (falls vorhanden)
	LastLoginAt *time.Time        `json:"last_login_at"`
	Limits      UserAccountLimits `json:"limits"`

	// Plan Aktueller Paketplan
	Plan        string                 `json:"plan"`
	Preferences UserAccountPreferences `json:"preferences"`
	Stats       UserAccountStats       `json:"stats"`

	// Status Kontostatus
	Status string `json:"status"`

	// Username Anzeigename des Benutzers
	Username string `json:"username"`
}

// UserAccountLimits defines model for UserAccountLimits.
type UserAccountLimits struct {
	// AllowedThumbnailFormats Verfügbare Thumbnail-Formate
	AllowedThumbnailFormats []string `json:"allowed_thumbnail_formats"`

	// CanMultiUpload Darf Mehrfach-Uploads durchführen
	CanMultiUpload bool `json:"can_multi_upload"`

	// DirectUploadEnabled Globale Einstellung für Direkt-Uploads
	DirectUploadEnabled bool `json:"direct_upload_enabled"`

	// ImageUploadEnabled Globale Einstellung für Bild-Uploads
	ImageUploadEnabled bool `json:"image_upload_enabled"`

	// MaxUploadBytes Maximale Uploadgröße pro Datei (in Bytes)
	MaxUploadBytes int64 `json:"max_upload_bytes"`

	// StorageQuotaBytes Gesamtverfügbarer Speicher (null bei unbegrenzt)
	StorageQuotaBytes *int64 `json:"storage_quota_bytes"`
}

// UserAccountPreferences defines model for UserAccountPreferences.
type UserAccountPreferences struct {
	// ThumbnailAvif Bevorzugt AVIF-Thumbnails
	ThumbnailAvif bool `json:"thumbnail_avif"`

	// ThumbnailOriginal Bevorzugt Original-Thumbnails
	ThumbnailOriginal bool `json:"thumbnail_original"`

	// ThumbnailWebp Bevorzugt WebP-Thumbnails
	ThumbnailWebp bool `json:"thumbnail_webp"`
}

// UserAccountStats defines model for UserAccountStats.
type UserAccountStats struct {
	Albums struct {
		// Count Anzahl erstellter Alben
		Count int64 `json:"count"`
	} `json:"albums"`
	Images struct {
		// Count Anzahl gespeicherter Bilder
		Count int64 `json:"count"`

		// StorageRemainingBytes Verbleibender Speicherplatz (null bei unbegrenzt)
		StorageRemainingBytes *int64 `json:"storage_remaining_bytes"`

		// StorageUsedBytes Belegter Speicher in Bytes
		StorageUsedBytes int64 `json:"storage_used_bytes"`
	} `json:"images"`
}

// BadRequest defines model for BadRequest.
type BadRequest = Error

// Forbidden defines model for Forbidden.
type Forbidden = Error

// InternalError defines model for InternalError.
type InternalError = Error

// NotFound defines model for NotFound.
type NotFound = Error

// PayloadTooLarge defines model for PayloadTooLarge.
type PayloadTooLarge = Error

// TooManyRequests defines model for TooManyRequests.
type TooManyRequests = Error

// Unauthorized defines model for Unauthorized.
type Unauthorized = Error

// UnsupportedMediaType defines model for UnsupportedMediaType.
type UnsupportedMediaType = Error

// PostDirectUploadMultipartBody defines parameters for PostDirectUpload.
type PostDirectUploadMultipartBody struct {
	File openapi_types.File `json:"file"`

	// Token Alternative to Authorization header: pass upload token as multipart field
	Token *string `json:"token,omitempty"`
}

// PostDirectUploadMultipartRequestBody defines body for PostDirectUpload for multipart/form-data ContentType.
type PostDirectUploadMultipartRequestBody PostDirectUploadMultipartBody

// PostUserUploadSessionJSONRequestBody defines body for PostUserUploadSession for application/json ContentType.
type PostUserUploadSessionJSONRequestBody = UploadSessionRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get processing status
	// (GET /images/{uuid}/status)
	GetImageStatus(c *fiber.Ctx, uuid string) error
	// Health check endpoint
	// (GET /ping)
	GetPing(c *fiber.Ctx) error
	// Direct storage upload
	// (POST /upload)
	PostDirectUpload(c *fiber.Ctx) error
	// Issue direct upload session
	// (POST /upload/sessions)
	PostUserUploadSession(c *fiber.Ctx) error
	// Get authenticated user profile
	// (GET /user/profile)
	GetUserProfile(c *fiber.Ctx) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// GetImageStatus operation middleware
func (siw *ServerInterfaceWrapper) GetImageStatus(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "uuid" -------------
	var uuid string

	err = runtime.BindStyledParameterWithOptions("simple", "uuid", c.Params("uuid"), &uuid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter uuid: %w", err).Error())
	}

	c.Context().SetUserValue(ApiKeyAuthScopes, []string{})

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetImageStatus(c, uuid)
}

// GetPing operation middleware
func (siw *ServerInterfaceWrapper) GetPing(c *fiber.Ctx) error {

	c.Context().SetUserValue(ApiKeyAuthScopes, []string{})

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetPing(c)
}

// PostDirectUpload operation middleware
func (siw *ServerInterfaceWrapper) PostDirectUpload(c *fiber.Ctx) error {

	c.Context().SetUserValue(UploadTokenAuthScopes, []string{})

	return siw.Handler.PostDirectUpload(c)
}

// PostUserUploadSession operation middleware
func (siw *ServerInterfaceWrapper) PostUserUploadSession(c *fiber.Ctx) error {

	c.Context().SetUserValue(ApiKeyAuthScopes, []string{})

	return siw.Handler.PostUserUploadSession(c)
}

// GetUserProfile operation middleware
func (siw *ServerInterfaceWrapper) GetUserProfile(c *fiber.Ctx) error {

	c.Context().SetUserValue(ApiKeyAuthScopes, []string{})

	return siw.Handler.GetUserProfile(c)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Get(options.BaseURL+"/images/:uuid/status", wrapper.GetImageStatus)

	router.Get(options.BaseURL+"/ping", wrapper.GetPing)

	router.Post(options.BaseURL+"/upload", wrapper.PostDirectUpload)

	router.Post(options.BaseURL+"/upload/sessions", wrapper.PostUserUploadSession)

	router.Get(options.BaseURL+"/user/profile", wrapper.GetUserProfile)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

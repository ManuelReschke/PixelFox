// Package apiv1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package apiv1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	ApiKeyAuthScopes      = "ApiKeyAuth.Scopes"
	BearerAuthScopes      = "BearerAuth.Scopes"
	UploadTokenAuthScopes = "UploadTokenAuth.Scopes"
)

// Error defines model for Error.
type Error struct {
	// Details Additional error details
	Details *string `json:"details,omitempty"`

	// Error Error type identifier
	Error string `json:"error"`

	// Message Human-readable error message
	Message string `json:"message"`
}

// Pong defines model for Pong.
type Pong struct {
	// Ping Simple response confirming API availability
	Ping string `json:"ping"`
}

// StorageUploadResponse defines model for StorageUploadResponse.
type StorageUploadResponse struct {
	Duplicate *bool   `json:"duplicate,omitempty"`
	ImageUuid *string `json:"image_uuid,omitempty"`
	ViewUrl   *string `json:"view_url,omitempty"`
}

// UploadSessionRequest defines model for UploadSessionRequest.
type UploadSessionRequest struct {
	// FileSize Größe der Datei in Bytes.
	FileSize int64 `json:"file_size"`
}

// UploadSessionResponse defines model for UploadSessionResponse.
type UploadSessionResponse struct {
	// ExpiresAt Ablaufzeit als Unix-Timestamp (Sekunden).
	ExpiresAt int64 `json:"expires_at"`

	// MaxBytes Maximale Dateigröße in Bytes, die mit diesem Token akzeptiert wird.
	MaxBytes int64 `json:"max_bytes"`

	// PoolId Interne ID des Storage-Pools.
	PoolId int64 `json:"pool_id"`

	// Token Zeitlich begrenzter Upload-Token (Bearer Token).
	Token string `json:"token"`

	// UploadUrl Vollständige URL zum Storage-Endpunkt.
	UploadUrl string `json:"upload_url"`
}

// UserAccount defines model for UserAccount.
type UserAccount struct {
	// ApiKeyLastUsedAt Letzte Verwendung des aktuellen API-Schlüssels
	ApiKeyLastUsedAt *time.Time `json:"api_key_last_used_at"`

	// CreatedAt Registrierungszeitpunkt
	CreatedAt time.Time `json:"created_at"`

	// Email Verknüpfte E-Mail-Adresse
	Email openapi_types.Email `json:"email"`

	// Id Benutzer-ID
	Id int64 `json:"id"`

	// LastLoginAt Zeitpunkt der letzten Anmeldung (falls vorhanden)
	LastLoginAt *time.Time        `json:"last_login_at"`
	Limits      UserAccountLimits `json:"limits"`

	// Plan Aktueller Paketplan
	Plan        string                 `json:"plan"`
	Preferences UserAccountPreferences `json:"preferences"`
	Stats       UserAccountStats       `json:"stats"`

	// Status Kontostatus
	Status string `json:"status"`

	// Username Anzeigename des Benutzers
	Username string `json:"username"`
}

// UserAccountLimits defines model for UserAccountLimits.
type UserAccountLimits struct {
	// AllowedThumbnailFormats Verfügbare Thumbnail-Formate
	AllowedThumbnailFormats []string `json:"allowed_thumbnail_formats"`

	// CanMultiUpload Darf Mehrfach-Uploads durchführen
	CanMultiUpload bool `json:"can_multi_upload"`

	// DirectUploadEnabled Globale Einstellung für Direkt-Uploads
	DirectUploadEnabled bool `json:"direct_upload_enabled"`

	// ImageUploadEnabled Globale Einstellung für Bild-Uploads
	ImageUploadEnabled bool `json:"image_upload_enabled"`

	// MaxUploadBytes Maximale Uploadgröße pro Datei (in Bytes)
	MaxUploadBytes int64 `json:"max_upload_bytes"`

	// StorageQuotaBytes Gesamtverfügbarer Speicher (null bei unbegrenzt)
	StorageQuotaBytes *int64 `json:"storage_quota_bytes"`
}

// UserAccountPreferences defines model for UserAccountPreferences.
type UserAccountPreferences struct {
	// ThumbnailAvif Bevorzugt AVIF-Thumbnails
	ThumbnailAvif bool `json:"thumbnail_avif"`

	// ThumbnailOriginal Bevorzugt Original-Thumbnails
	ThumbnailOriginal bool `json:"thumbnail_original"`

	// ThumbnailWebp Bevorzugt WebP-Thumbnails
	ThumbnailWebp bool `json:"thumbnail_webp"`
}

// UserAccountStats defines model for UserAccountStats.
type UserAccountStats struct {
	Albums struct {
		// Count Anzahl erstellter Alben
		Count int64 `json:"count"`
	} `json:"albums"`
	Images struct {
		// Count Anzahl gespeicherter Bilder
		Count int64 `json:"count"`

		// StorageRemainingBytes Verbleibender Speicherplatz (null bei unbegrenzt)
		StorageRemainingBytes *int64 `json:"storage_remaining_bytes"`

		// StorageUsedBytes Belegter Speicher in Bytes
		StorageUsedBytes int64 `json:"storage_used_bytes"`
	} `json:"images"`
}

// BadRequest defines model for BadRequest.
type BadRequest = Error

// Forbidden defines model for Forbidden.
type Forbidden = Error

// InternalError defines model for InternalError.
type InternalError = Error

// NotFound defines model for NotFound.
type NotFound = Error

// PayloadTooLarge defines model for PayloadTooLarge.
type PayloadTooLarge = Error

// TooManyRequests defines model for TooManyRequests.
type TooManyRequests = Error

// Unauthorized defines model for Unauthorized.
type Unauthorized = Error

// UnsupportedMediaType defines model for UnsupportedMediaType.
type UnsupportedMediaType = Error

// PostDirectUploadMultipartBody defines parameters for PostDirectUpload.
type PostDirectUploadMultipartBody struct {
	File openapi_types.File `json:"file"`

	// Token Alternative to Authorization header: pass upload token as multipart field
	Token *string `json:"token,omitempty"`
}

// PostDirectUploadMultipartRequestBody defines body for PostDirectUpload for multipart/form-data ContentType.
type PostDirectUploadMultipartRequestBody PostDirectUploadMultipartBody

// PostUserUploadSessionJSONRequestBody defines body for PostUserUploadSession for application/json ContentType.
type PostUserUploadSessionJSONRequestBody = UploadSessionRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get processing status
	// (GET /image/status/{uuid})
	GetImageStatus(c *fiber.Ctx, uuid string) error
	// Health check endpoint
	// (GET /ping)
	GetPing(c *fiber.Ctx) error
	// Direct storage upload
	// (POST /upload)
	PostDirectUpload(c *fiber.Ctx) error
	// Issue direct upload session
	// (POST /upload/sessions)
	PostUserUploadSession(c *fiber.Ctx) error
	// Get authenticated user profile
	// (GET /user/profile)
	GetUserProfile(c *fiber.Ctx) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// GetImageStatus operation middleware
func (siw *ServerInterfaceWrapper) GetImageStatus(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "uuid" -------------
	var uuid string

	err = runtime.BindStyledParameterWithOptions("simple", "uuid", c.Params("uuid"), &uuid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter uuid: %w", err).Error())
	}

	c.Context().SetUserValue(ApiKeyAuthScopes, []string{})

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetImageStatus(c, uuid)
}

// GetPing operation middleware
func (siw *ServerInterfaceWrapper) GetPing(c *fiber.Ctx) error {

	c.Context().SetUserValue(ApiKeyAuthScopes, []string{})

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetPing(c)
}

// PostDirectUpload operation middleware
func (siw *ServerInterfaceWrapper) PostDirectUpload(c *fiber.Ctx) error {

	c.Context().SetUserValue(UploadTokenAuthScopes, []string{})

	return siw.Handler.PostDirectUpload(c)
}

// PostUserUploadSession operation middleware
func (siw *ServerInterfaceWrapper) PostUserUploadSession(c *fiber.Ctx) error {

	c.Context().SetUserValue(ApiKeyAuthScopes, []string{})

	return siw.Handler.PostUserUploadSession(c)
}

// GetUserProfile operation middleware
func (siw *ServerInterfaceWrapper) GetUserProfile(c *fiber.Ctx) error {

	c.Context().SetUserValue(ApiKeyAuthScopes, []string{})

	return siw.Handler.GetUserProfile(c)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Get(options.BaseURL+"/image/status/:uuid", wrapper.GetImageStatus)

	router.Get(options.BaseURL+"/ping", wrapper.GetPing)

	router.Post(options.BaseURL+"/upload", wrapper.PostDirectUpload)

	router.Post(options.BaseURL+"/upload/sessions", wrapper.PostUserUploadSession)

	router.Get(options.BaseURL+"/user/profile", wrapper.GetUserProfile)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"cMfAT+ZW16v/BQAA//+r95WeUyoAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

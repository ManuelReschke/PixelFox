package views

import (
    "github.com/ManuelReschke/PixelFox/app/models"
    "strings"
)

templ NewsContent(newsList []models.News) {
	<div class="container mx-auto px-4 py-8">
		<h1 class="text-3xl font-bold mb-8 text-center">News</h1>
		
		if len(newsList) > 0 {
			<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
				for _, news := range newsList {
					<div class="card bg-base-100 shadow-xl hover:shadow-2xl transition-shadow duration-300">
						<div class="card-body">
							<h2 class="card-title">{ news.Title }</h2>
							<p class="text-sm text-base-content/70">
								Von { news.User.Name } • { news.CreatedAt.Format("02.01.2006") }
							</p>
							<div class="mt-2">
								if len(news.Content) > 200 {
									// Strip HTML and limit content preview
									@templ.Raw(stripHTMLAndTruncate(news.Content, 200))
									<span>...</span>
								} else {
									@templ.Raw(news.Content)
								}
							</div>
							<div class="card-actions justify-end mt-4">
								<a href={ templ.SafeURL("/news/" + news.Slug) } class="btn btn-primary btn-sm">
									Weiterlesen
								</a>
							</div>
						</div>
					</div>
				}
			</div>
		} else {
			<div class="flex flex-col items-center justify-center py-12">
				<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-16 text-base-content/50 mb-4">
					<path stroke-linecap="round" stroke-linejoin="round" d="M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126ZM12 15.75h.007v.008H12v-.008Z" />
				</svg>
				<p class="text-xl text-base-content/70">Aktuell sind keine News verfügbar</p>
			</div>
		}
	</div>
}

func stripHTMLAndTruncate(html string, maxLength int) string {
	// Very basic HTML stripping - in a real app you'd want a proper HTML parser
	text := strings.ReplaceAll(html, "<br>", " ")
	text = strings.ReplaceAll(text, "<p>", "")
	text = strings.ReplaceAll(text, "</p>", " ")
	text = strings.ReplaceAll(text, "<div>", "")
	text = strings.ReplaceAll(text, "</div>", " ")
	
	// Remove other HTML tags
	var result strings.Builder
	var inTag bool
	for _, r := range text {
		if r == '<' {
			inTag = true
			continue
		}
		if r == '>' {
			inTag = false
			continue
		}
		if !inTag {
			result.WriteRune(r)
		}
	}
	
	// Truncate to maxLength
	stripped := result.String()
	if len(stripped) <= maxLength {
		return stripped
	}
	
	return stripped[:maxLength]
}

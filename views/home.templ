package views

import (
	"github.com/gofiber/fiber/v2"
	"time"
	"strconv"
	"fmt"
	"github.com/ManuelReschke/PixelFox/internal/pkg/statistics"
	"github.com/ManuelReschke/PixelFox/internal/pkg/viewmodel"
	"github.com/ManuelReschke/PixelFox/app/models"
    "github.com/ManuelReschke/PixelFox/internal/pkg/usercontext"
)

templ HomeIndex(fromProtected bool, csrfToken string, stats statistics.StatisticsData) {
	<section class="mx-auto w-fit flex flex-col gap-6 text-center">
        <img loading="lazy" src="/img/pixelfox-logo.png" class="mx-auto w-32"  alt="PixelFox Logo"/>
		if !fromProtected {
			<h1 class="text-5xl font-bold">Kostenlos Bilder hochladen und teilen</h1>
			<p class="text-2xl font-thin">
				Wir bieten "<span id="changing-word">schnelles</span>" Bilderhosting für alle!
			</p>
			<hr class="w-4/5 mx-auto opacity-25"/>
			<p class="text-base font-thin">Hast du bereits ein Konto?</p>
			<div class="flex gap-4 justify-center">
                <a hx-swap="transition:true" href="/register" class="badge badge-neutral px-6 py-4 hover:scale-[1.1] text-lg font-thin">
                    Registrieren
                </a>
				<a hx-swap="transition:true" href="/login" class="badge badge-secondary px-6 py-4 hover:scale-[1.1] text-lg font-thin">
					Einloggen
				</a>
			</div>
		} else {
			if models.GetAppSettings().IsImageUploadEnabled() {
				<form id="upload_form" hx-encoding="multipart/form-data" hx-post="/upload" data-direct-upload={ fmt.Sprintf("%t", models.GetAppSettings().IsDirectUploadEnabled()) } class="flex flex-col items-center gap-6 max-w-md mx-auto p-8 border border-base-300 shadow-lg rounded-xl bg-base-100">
              <div class="text-center mb-2">
                <h3 class="text-xl font-semibold">Bild hochladen</h3>
                <p class="text-sm text-base-content/70">Wähle ein Bild zum Hochladen aus</p>
              </div>
              
              <!-- File Input Area -->
              <div class="w-full">
                <div id="drop-area" class="border-2 border-dashed border-primary/50 rounded-lg p-6 text-center cursor-pointer hover:border-primary transition-colors duration-200 relative">
                  <input
                    type="file"
                    name="file"
                    id="file-input"
                    accept="image/*"
                    class="absolute inset-0 w-full h-full opacity-0 cursor-pointer z-10"
                    required
                  />
                  <div class="flex flex-col items-center gap-2">
                    <div id="preview-container" class="mb-2">
                      <svg id="upload-icon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-10 text-primary">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M9 8.25H7.5a2.25 2.25 0 0 0-2.25 2.25v9a2.25 2.25 0 0 0 2.25 2.25h9a2.25 2.25 0 0 0 2.25-2.25v-9a2.25 2.25 0 0 0-2.25-2.25H15m0-3-3-3m0 0-3 3m3-3V15" />
                      </svg>
                      <img id="inline-image-preview" class="max-h-24 max-w-full object-contain rounded hidden" src="" alt="Bildvorschau" />
                    </div>
                    <div id="file-name" class="text-sm font-medium">Datei hierher ziehen oder klicken zum Auswählen</div>
                    <p class="text-xs text-base-content/60 mt-1">Formate: JPG, PNG, GIF, WEBP, AVIF, SVG, BMP</p>
                  </div>
                </div>
              </div>
              
              <!-- CSRF Token -->
              <input type="hidden" name="_csrf" value={csrfToken}>

              <!-- Upload Button -->
              <button id="upload-button" class="btn btn-primary w-full flex items-center justify-center gap-2 py-3 text-white font-medium rounded-lg hover:opacity-90 transition-opacity duration-200 disabled:opacity-50" disabled>
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-5">
                  <path stroke-linecap="round" stroke-linejoin="round" d="M9 8.25H7.5a2.25 2.25 0 0 0-2.25 2.25v9a2.25 2.25 0 0 0 2.25 2.25h9a2.25 2.25 0 0 0 2.25-2.25v-9a2.25 2.25 0 0 0-2.25-2.25H15m0-3-3-3m0 0-3 3m3-3V15" />
                </svg>
                <span>Hochladen</span>
              </button>

              <!-- Progress Container -->
              <div id="progress-container" class="w-full hidden">
                <div class="flex justify-between text-sm mb-1">
                  <span id="upload-status">Wird hochgeladen...</span>
                  <span id="upload-percentage">0%</span>
                </div>
                <div class="w-full bg-base-300 rounded-full h-2.5 overflow-hidden">
                  <div id="progress-bar" class="bg-primary h-2.5 rounded-full transition-all duration-200" style="width: 0%"></div>
                </div>
              </div>
            </form>
            
            <!-- Upload Result Message -->
            <div id="upload-result" class="mt-4 text-center hidden">
              <div id="success-message" class="alert alert-success shadow-sm hidden">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>
                <span id="success-text" class="ml-2"></span>
              </div>
              <div id="error-message" class="alert alert-error shadow-sm hidden">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>
                <span id="error-text" class="ml-2"></span>
              </div>
            </div>
			} else {
				<div class="flex flex-col items-center gap-4 max-w-md mx-auto p-8 border border-red-300 shadow-lg rounded-xl bg-red-50">
					<svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728L5.636 5.636m12.728 12.728L18.364 5.636M5.636 18.364l12.728-12.728" />
					</svg>
					<h3 class="text-xl font-semibold text-red-700">Upload deaktiviert</h3>
					<p class="text-red-600 text-center">Der Bild-Upload ist derzeit deaktiviert. Bitte wende dich an den Administrator.</p>
				</div>
			}
		}
	</section>

    if !fromProtected {
        @Stats(stats)
    }
}


func extractUsername(c *fiber.Ctx) string {
	if c == nil {
		return ""
	}
	if userNameValue := c.Locals("username"); userNameValue != nil {
		if userName, ok := userNameValue.(string); ok {
			return userName
		}
	}
	return ""
}

templ HomeCtx(
	c *fiber.Ctx,
	page string,
	fromProtected bool,
	isError bool,
	msg fiber.Map,
	cmp templ.Component,
	isAdmin bool,
	ogViewModel *viewmodel.OpenGraph,
) {
    {{
        plan := ""
        if fromProtected {
            uc := usercontext.GetUserContext(c)
            if uc.Plan != "" { plan = uc.Plan } else { plan = "free" }
        }
    }}
	@Layout(viewmodel.Layout{
                    Page:          page,
                    FromProtected: fromProtected,
                    IsError:       isError,
                    Msg:           msg,
                    Username:      extractUsername(c),
                    IsAdmin:       isAdmin,
                    OGViewModel:   ogViewModel,
                    Plan:          plan,
    }) {
		@cmp
	}
}

templ Home(
	page string,
	fromProtected bool,
	isError bool,
	msg fiber.Map,
	cmp templ.Component,
	isAdmin bool,
	ogViewModel *viewmodel.OpenGraph,
) {
	@Layout(viewmodel.Layout{
                    Page:          page,
                    FromProtected: fromProtected,
                    IsError:       isError,
                    Msg:           msg,
                    Username:      "", // Legacy - Username not available
                    IsAdmin:       isAdmin,
                    OGViewModel:   ogViewModel,
                    Plan:          "",
    }) {
		@cmp
	}
}


templ FilePicker() {

}

templ Stats(stats statistics.StatisticsData) {
<section class="mx-auto w-fit flex flex-col gap-4 text-center mt-10">
    <h4 class="text-xl font-thin"> Statistiken </h4>
    <div class="stats shadow">
      <div class="stat">
        <div class="stat-figure text-secondary">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              stroke-width="1.5"
              stroke="currentColor"
              class="size-6"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                d="m2.25 15.75 5.159-5.159a2.25 2.25 0 0 1 3.182 0l5.159 5.159m-1.5-1.5 1.409-1.409a2.25 2.25 0 0 1 3.182 0l2.909 2.909m-18 3.75h16.5a1.5 1.5 0 0 0 1.5-1.5V6a1.5 1.5 0 0 0-1.5-1.5H3.75A1.5 1.5 0 0 0 2.25 6v12a1.5 1.5 0 0 0 1.5 1.5Zm10.5-11.25h.008v.008h-.008V8.25Zm.375 0a.375.375 0 1 1-.75 0 .375.375 0 0 1 .75 0Z"
              />
            </svg>
        </div>
        <div class="stat-title">Bilder Heute</div>
        <div class="stat-value">{ strconv.Itoa(stats.TodayImages) }</div>
        <div class="stat-desc">{ time.Now().Format("02.01.2006") }</div>
      </div>

      <div class="stat">
        <div class="stat-figure text-secondary">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              stroke-width="1.5"
              stroke="currentColor"
              class="size-6"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                d="M18 7.5v3m0 0v3m0-3h3m-3 0h-3m-2.25-4.125a3.375 3.375 0 1 1-6.75 0 3.375 3.375 0 0 1 6.75 0ZM3 19.235v-.11a6.375 6.375 0 0 1 12.75 0v.109A12.318 12.318 0 0 1 9.374 21c-2.331 0-4.512-.645-6.374-1.766Z"
              />
            </svg>
        </div>
        <div class="stat-title">Benutzer</div>
        <div class="stat-value">{ strconv.Itoa(stats.TotalUsers) }</div>
        <div class="stat-desc">Aktive Nutzer</div>
      </div>

      <div class="stat">
        <div class="stat-figure text-secondary">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              stroke-width="1.5"
              stroke="currentColor"
              class="size-6"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                d="M2.25 12.75V12A2.25 2.25 0 0 1 4.5 9.75h15A2.25 2.25 0 0 1 21.75 12v.75m-8.69-6.44-2.12-2.12a1.5 1.5 0 0 0-1.061-.44H4.5A2.25 2.25 0 0 0 2.25 6v12a2.25 2.25 0 0 0 2.25 2.25h15A2.25 2.25 0 0 0 21.75 18V9a2.25 2.25 0 0 0-2.25-2.25h-5.379a1.5 1.5 0 0 1-1.06-.44Z"
              />
            </svg>
        </div>
        <div class="stat-title">Alben Insgesamt</div>
        <div class="stat-value">{ strconv.Itoa(stats.TotalAlbums) }</div>
        <div class="stat-desc">Erstellte Alben</div>
      </div>

      <div class="stat">
        <div class="stat-figure text-secondary">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke-width="1.5"
            stroke="currentColor"
            class="size-6"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d="M19.5 14.25v-2.625a3.375 3.375 0 0 0-3.375-3.375h-1.5A1.125 1.125 0 0 1 13.5 7.125v-1.5a3.375 3.375 0 0 0-3.375-3.375H8.25m2.25 0H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 0 0-9-9Z"
            />
          </svg>
        </div>
        <div class="stat-title">Bilder Insgesamt</div>
        <div class="stat-value">{ strconv.Itoa(stats.TotalImages) }</div>
        <div class="stat-desc">Hochgeladene Bilder</div>
      </div>
    </div>
</section>
}

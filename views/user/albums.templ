package user_views

import (
	"fmt"
	"github.com/ManuelReschke/PixelFox/views"
	"github.com/ManuelReschke/PixelFox/internal/pkg/viewmodel"
	"github.com/ManuelReschke/PixelFox/app/models"
	"github.com/gofiber/fiber/v2"
)

// AlbumWithGalleryImages holds album with converted gallery images
type AlbumWithGalleryImages struct {
	Album  models.Album
	Images []GalleryImage
}

// getCoverImage returns the cover image for an album
func getCoverImage(albumData AlbumWithGalleryImages) *GalleryImage {
	if albumData.Album.CoverImageID > 0 && len(albumData.Images) > 0 {
		for _, image := range albumData.Images {
			if image.ID == albumData.Album.CoverImageID {
				return &image
			}
		}
	}
	if len(albumData.Images) > 0 {
		return &albumData.Images[0]
	}
	return nil
}

templ albumCoverImage(albumData AlbumWithGalleryImages) {
	if getCoverImage(albumData) != nil {
		<img src={ getCoverImage(albumData).SmallPreviewPath } alt={ albumData.Album.Title } class="max-w-full max-h-full object-contain" />
	} else {
		<div class="flex items-center justify-center h-full text-gray-400">
			<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-16 h-16">
				<path stroke-linecap="round" stroke-linejoin="round" d="M2.25 15.75l5.159-5.159a2.25 2.25 0 013.182 0l5.159 5.159m-1.5-1.5l1.409-1.409a2.25 2.25 0 013.182 0l2.909 2.909m-18 3.75h16.5a1.5 1.5 0 001.5-1.5V6a1.5 1.5 0 00-1.5-1.5H3.75A1.5 1.5 0 002.25 6v12a1.5 1.5 0 001.5 1.5zm10.5-11.25h.008v.008h-.008V8.25zm.375 0a.375.375 0 11-.75 0 .375.375 0 01.75 0z" />
			</svg>
		</div>
	}
}

templ Albums(
	page string,
	fromProtected bool,
	isError bool,
	msg fiber.Map,
	username string,
	cmp templ.Component,
	isAdmin bool,
) {
	@views.Layout(viewmodel.Layout{
        Page:          page,
        FromProtected: fromProtected,
        IsError:       isError,
        Msg:           msg,
        Username:      username,
        IsAdmin:       isAdmin,
        OGViewModel:   nil,
    }) {
		@cmp
	}
}

templ AlbumsIndex(username string, csrfToken string, albums []AlbumWithGalleryImages) {
	<div class="w-full mx-auto px-4 py-8">
		<div class="flex justify-between items-center mb-6">
			<div>
				<h1 class="text-2xl font-bold mb-1">Meine Alben</h1>
				<p class="text-sm text-gray-500">{ fmt.Sprintf("%d Alben", len(albums)) }</p>
			</div>
			<a href="/user/albums/create" class="btn btn-primary">
				<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 mr-2">
					<path stroke-linecap="round" stroke-linejoin="round" d="M12 4.5v15m7.5-7.5h-15" />
				</svg>
				Neues Album
			</a>
		</div>

		if len(albums) > 0 {
			<div class="albums-grid gap-3">
				for _, albumData := range albums {
					<div class="card bg-base-100 shadow-lg flex flex-col h-full">
						<figure class="h-24 bg-gray-200 flex items-center justify-center overflow-hidden">
							@albumCoverImage(albumData)
						</figure>
						<div class="card-body p-3 flex flex-col flex-grow">
							<div class="flex-grow">
								<h2 class="card-title text-sm">{ albumData.Album.Title }</h2>
								if albumData.Album.Description != "" {
									<p class="text-xs text-gray-600 truncate">{ albumData.Album.Description }</p>
								}
								<div class="flex items-center justify-between text-xs text-gray-500 mt-1">
									<span>{ fmt.Sprintf("%d Bilder", len(albumData.Images)) }</span>
									<span>{ albumData.Album.CreatedAt.Format("02.01.2006") }</span>
								</div>
							</div>
							<div class="card-actions justify-end mt-2 gap-1">
								<a href={ templ.URL(fmt.Sprintf("/user/albums/%d", albumData.Album.ID)) } class="album-btn album-btn-primary">Ansehen</a>
								<a href={ templ.URL(fmt.Sprintf("/user/albums/edit/%d", albumData.Album.ID)) } class="album-btn album-btn-outline">Bearbeiten</a>
								<a href={ templ.URL(fmt.Sprintf("/user/albums/delete/%d", albumData.Album.ID)) } 
								   class="album-btn album-btn-error"
								   onclick="return confirm('Möchten Sie dieses Album wirklich löschen?')">
									Löschen
								</a>
							</div>
						</div>
					</div>
				}
			</div>
		} else {
			<div class="flex flex-col items-center justify-center py-12">
				<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-16 h-16 mb-4 text-gray-400">
					<path stroke-linecap="round" stroke-linejoin="round" d="M2.25 15.75l5.159-5.159a2.25 2.25 0 013.182 0l5.159 5.159m-1.5-1.5l1.409-1.409a2.25 2.25 0 013.182 0l2.909 2.909m-18 3.75h16.5a1.5 1.5 0 001.5-1.5V6a1.5 1.5 0 00-1.5-1.5H3.75A1.5 1.5 0 002.25 6v12a1.5 1.5 0 001.5 1.5zm10.5-11.25h.008v.008h-.008V8.25zm.375 0a.375.375 0 11-.75 0 .375.375 0 01.75 0z" />
				</svg>
				<h3 class="text-xl font-semibold mb-2">Keine Alben gefunden</h3>
				<p class="text-gray-500 mb-4">Du hast noch keine Alben erstellt.</p>
				<a href="/user/albums/create" class="btn btn-primary">
					<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 mr-2">
						<path stroke-linecap="round" stroke-linejoin="round" d="M12 4.5v15m7.5-7.5h-15" />
					</svg>
					Erstes Album erstellen
				</a>
			</div>
		}
	</div>

	<!-- Custom CSS for responsive album grid -->
	<style>
		.albums-grid {
			display: grid;
			grid-template-columns: repeat(2, 1fr);
			gap: 12px;
		}

		/* Mobile */
		@media (min-width: 480px) {
			.albums-grid {
				grid-template-columns: repeat(3, 1fr);
			}
		}

		/* Tablet */
		@media (min-width: 768px) {
			.albums-grid {
				grid-template-columns: repeat(4, 1fr);
			}
		}

		/* Laptop */
		@media (min-width: 1024px) {
			.albums-grid {
				grid-template-columns: repeat(5, 1fr);
			}
		}

		/* Desktop */
		@media (min-width: 1280px) {
			.albums-grid {
				grid-template-columns: repeat(6, 1fr);
			}
		}

		/* Large Desktop / Full HD */
		@media (min-width: 1600px) {
			.albums-grid {
				grid-template-columns: repeat(7, 1fr);
			}
		}

		/* Ultra Wide */
		@media (min-width: 2000px) {
			.albums-grid {
				grid-template-columns: repeat(8, 1fr);
			}
		}

		/* Super small album buttons */
		.album-btn {
			display: inline-flex;
			align-items: center;
			justify-content: center;
			padding: 2px 6px;
			font-size: 10px;
			font-weight: 500;
			line-height: 1;
			border-radius: 4px;
			border: 1px solid transparent;
			text-decoration: none;
			cursor: pointer;
			transition: all 0.2s ease;
		}

		.album-btn-primary {
			background-color: #3b82f6;
			color: white;
			border-color: #3b82f6;
		}

		.album-btn-primary:hover {
			background-color: #2563eb;
			border-color: #2563eb;
		}

		.album-btn-outline {
			background-color: transparent;
			color: #6b7280;
			border-color: #d1d5db;
		}

		.album-btn-outline:hover {
			background-color: #f3f4f6;
			border-color: #9ca3af;
		}

		.album-btn-error {
			background-color: transparent;
			color: #dc2626;
			border-color: #fca5a5;
		}

		.album-btn-error:hover {
			background-color: #fee2e2;
			border-color: #f87171;
		}
	</style>
}
package user_views

import (
    "fmt"
    "strings"
    "github.com/ManuelReschke/PixelFox/views"
    "github.com/ManuelReschke/PixelFox/internal/pkg/viewmodel"
    "github.com/ManuelReschke/PixelFox/app/models"
    "github.com/ManuelReschke/PixelFox/internal/pkg/entitlements"
    "github.com/gofiber/fiber/v2"
)

// AlbumWithGalleryImages holds album with converted gallery images
type AlbumWithGalleryImages struct {
	Album  models.Album
	Images []GalleryImage
}

// getCoverImage returns the cover image for an album
func getCoverImage(albumData AlbumWithGalleryImages) *GalleryImage {
	if albumData.Album.CoverImageID > 0 && len(albumData.Images) > 0 {
		for _, image := range albumData.Images {
			if image.ID == albumData.Album.CoverImageID {
				return &image
			}
		}
	}
	if len(albumData.Images) > 0 {
		return &albumData.Images[0]
	}
	return nil
}

templ albumCoverImage(albumData AlbumWithGalleryImages) {
	if getCoverImage(albumData) != nil {
		<img src={ getCoverImage(albumData).SmallPreviewPath } alt={ albumData.Album.Title } class="w-full h-full object-cover rounded-t-lg" />
	} else {
		<div class="flex items-center justify-center h-full text-gray-400">
			<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-8 h-8">
				<path stroke-linecap="round" stroke-linejoin="round" d="M2.25 15.75l5.159-5.159a2.25 2.25 0 013.182 0l5.159 5.159m-1.5-1.5l1.409-1.409a2.25 2.25 0 013.182 0l2.909 2.909m-18 3.75h16.5a1.5 1.5 0 001.5-1.5V6a1.5 1.5 0 00-1.5-1.5H3.75A1.5 1.5 0 002.25 6v12a1.5 1.5 0 001.5 1.5zm10.5-11.25h.008v.008h-.008V8.25zm.375 0a.375.375 0 11-.75 0 .375.375 0 01.75 0z" />
			</svg>
		</div>
	}
}

templ Albums(
    page string,
    fromProtected bool,
    isError bool,
    msg fiber.Map,
    username string,
    plan string,
    cmp templ.Component,
    isAdmin bool,
) {
    @views.Layout(viewmodel.Layout{
        Page:          page,
        FromProtected: fromProtected,
        IsError:       isError,
        Msg:           msg,
        Username:      username,
        IsAdmin:       isAdmin,
        OGViewModel:   nil,
        Plan:          plan,
    }) {
        @cmp
    }
}

templ AlbumsIndex(username string, csrfToken string, plan string, albums []AlbumWithGalleryImages) {
    <div class="container mx-auto px-4 py-8">
        <div class="flex justify-between items-center mb-6">
            <div>
                <h1 class="text-2xl font-bold mb-1">Meine Alben</h1>
                if entitlements.AlbumLimit(entitlements.Plan(strings.ToLower(plan))) > -1 {
                    <p class="text-sm text-base-content/70 mb-6">{ fmt.Sprintf("%d / %d Alben", len(albums), entitlements.AlbumLimit(entitlements.Plan(strings.ToLower(plan)))) }</p>
                } else {
                    <p class="text-sm text-base-content/70 mb-6">{ fmt.Sprintf("%d Alben", len(albums)) }</p>
                }
            </div>
            if entitlements.AlbumLimit(entitlements.Plan(strings.ToLower(plan))) < 0 || len(albums) < entitlements.AlbumLimit(entitlements.Plan(strings.ToLower(plan))) {
                <a href="/user/albums/create" class="btn btn-primary gap-2">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M12 4.5v15m7.5-7.5h-15" />
                    </svg>
                    Neues Album
                </a>
            } else {
                <div class="flex items-center gap-2">
                    <div class="tooltip tooltip-left" data-tip="Du willst mehr? Upgrade auf Premium">
                        <button class="btn btn-primary gap-2" disabled>
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M12 4.5v15m7.5-7.5h-15" />
                            </svg>
                            Neues Album
                        </button>
                    </div>
                    <a href="/pricing" class="btn btn-outline btn-warning gap-2 hover:bg-yellow-100 hover:text-yellow-700">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M12 17.27 18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z" />
                        </svg>
                        +Premium
                    </a>
                </div>
            }
        </div>

        if len(albums) > 0 {
			<div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 2xl:grid-cols-7 gap-4">
				for _, albumData := range albums {
					<div class="card bg-base-100 shadow-lg hover:shadow-xl transition-shadow duration-200">
						<figure class="h-32 bg-base-200 flex items-center justify-center overflow-hidden">
							@albumCoverImage(albumData)
						</figure>
						<div class="card-body p-4">
							<h2 class="card-title text-sm font-semibold truncate">{ albumData.Album.Title }</h2>
							if albumData.Album.Description != "" {
								<p class="text-xs text-base-content/60 truncate mb-2">{ albumData.Album.Description }</p>
							}
							<div class="flex items-center justify-between text-xs text-base-content/50 mb-3">
								<span>{ fmt.Sprintf("%d Bilder", len(albumData.Images)) }</span>
								<span>{ albumData.Album.CreatedAt.Format("02.01.2006") }</span>
							</div>
                        <div class="card-actions justify-center gap-2">
                            <a href={ templ.URL(fmt.Sprintf("/user/albums/%d", albumData.Album.ID)) } class="btn btn-primary btn-xs">
                                Ansehen
                            </a>
                            <button class="btn btn-outline btn-xs" onclick={ templ.ComponentScript{ Call: fmt.Sprintf("openAlbumShare('/a/%s')", albumData.Album.ShareLink) } }>
                                Teilen
                            </button>
                            <a href={ templ.URL(fmt.Sprintf("/user/albums/edit/%d", albumData.Album.ID)) } class="btn btn-outline btn-xs">
                                Bearbeiten
                            </a>
                            <a href={ templ.URL(fmt.Sprintf("/user/albums/delete/%d", albumData.Album.ID)) } 
                               class="btn btn-error btn-outline btn-xs"
                               onclick="return confirm('Möchten Sie dieses Album wirklich löschen?')">
                                Löschen
                            </a>
                        </div>
                    </div>
                </div>
            }
			</div>
		} else {
			<div class="flex flex-col items-center justify-center py-16">
				<div class="text-center max-w-md">
					<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-16 h-16 mx-auto mb-4 text-gray-400">
						<path stroke-linecap="round" stroke-linejoin="round" d="M2.25 15.75l5.159-5.159a2.25 2.25 0 013.182 0l5.159 5.159m-1.5-1.5l1.409-1.409a2.25 2.25 0 013.182 0l2.909 2.909m-18 3.75h16.5a1.5 1.5 0 001.5-1.5V6a1.5 1.5 0 00-1.5-1.5H3.75A1.5 1.5 0 002.25 6v12a1.5 1.5 0 001.5 1.5zm10.5-11.25h.008v.008h-.008V8.25zm.375 0a .375.375 0 11-.75 0 .375.375 0 01.75 0z" />
					</svg>
					<h3 class="text-2xl font-bold mb-2">Keine Alben vorhanden</h3>
					<p class="text-base-content/60 mb-6">Erstelle dein erstes Album, um deine Bilder zu organisieren.</p>
                if entitlements.AlbumLimit(entitlements.Plan(strings.ToLower(plan))) < 0 || len(albums) < entitlements.AlbumLimit(entitlements.Plan(strings.ToLower(plan))) {
                    <a href="/user/albums/create" class="btn btn-primary gap-2">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M12 4.5v15m7.5-7.5h-15" />
                        </svg>
                        Erstes Album erstellen
                    </a>
                } else {
                    <div class="flex items-center justify-center gap-2">
                        <div class="tooltip tooltip-left" data-tip="Du willst mehr? Upgrade auf Premium">
                            <button class="btn btn-primary gap-2" disabled>
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M12 4.5v15m7.5-7.5h-15" />
                                </svg>
                                Erstes Album erstellen
                            </button>
                        </div>
                        <a href="/pricing" class="btn btn-outline btn-warning gap-2 hover:bg-yellow-100 hover:text-yellow-700">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" viewBox="0 0 24 24" fill="currentColor">
                                <path d="M12 17.27 18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z" />
                            </svg>
                            +Premium
                        </a>
                    </div>
                }
            </div>
        </div>
        }
    </div>
}

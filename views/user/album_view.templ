package user_views

import (
	"fmt"
	"github.com/ManuelReschke/PixelFox/views"
	"github.com/ManuelReschke/PixelFox/internal/pkg/viewmodel"
	"github.com/ManuelReschke/PixelFox/app/models"
	"github.com/gofiber/fiber/v2"
)

templ AlbumView(
	page string,
	fromProtected bool,
	isError bool,
	msg fiber.Map,
	username string,
	cmp templ.Component,
	isAdmin bool,
) {
	@views.Layout(viewmodel.Layout{
        Page:          page,
        FromProtected: fromProtected,
        IsError:       isError,
        Msg:           msg,
        Username:      username,
        IsAdmin:       isAdmin,
        OGViewModel:   nil,
    }) {
		@cmp
	}
}

func imageInAlbum(image GalleryImage, albumImages []GalleryImage) bool {
	for _, albumImage := range albumImages {
		if albumImage.ID == image.ID {
			return true
		}
	}
	return false
}

templ AlbumViewIndex(username string, csrfToken string, album models.Album, albumImages []GalleryImage, userImages []GalleryImage) {
	<div class="container mx-auto px-4 py-8">
			<div class="flex items-center justify-between mb-6">
				<div class="flex items-center">
				<a href="/user/albums" class="btn btn-ghost btn-circle mr-4">
					<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
						<path stroke-linecap="round" stroke-linejoin="round" d="M10.5 19.5L3 12m0 0l7.5-7.5M3 12h18" />
					</svg>
				</a>
				<div>
					<h1 class="text-2xl font-bold">{ album.Title }</h1>
					if album.Description != "" {
						<p class="text-gray-600">{ album.Description }</p>
					}
                    <p class="text-sm text-gray-500 flex items-center gap-3">
                        <span>{ fmt.Sprintf("%d Bilder", len(albumImages)) }</span>
                        <span class="inline-flex items-center gap-1">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-4 h-4">
                                <path d="M12 4.5c-7.5 0-10.5 7.5-10.5 7.5S4.5 19.5 12 19.5 22.5 12 22.5 12 19.5 4.5 12 4.5zm0 12a4.5 4.5 0 1 1 0-9 4.5 4.5 0 0 1 0 9zm0-7.5a3 3 0 1 0 0 6 3 3 0 0 0 0-6z" />
                            </svg>
                            <span>{ fmt.Sprintf("%d Aufrufe", album.ViewCount) }</span>
                        </span>
                    </p>
				</div>
			</div>
                <div class="flex gap-2">
                    <button class="btn btn-primary" onclick="document.getElementById('add-images-modal').showModal()">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 mr-2">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M12 4.5v15m7.5-7.5h-15" />
                        </svg>
                        Bilder hinzufügen
                    </button>
                    <button class="btn btn-outline" onclick={ templ.ComponentScript{ Call: "openAlbumShare('/a/" + album.ShareLink + "')" } }>
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 mr-2">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M7.217 10.907a2.25 2.25 0 100 2.186m0-2.186c.18.324.283.696.283 1.093s-.103.77-.283 1.093m0-2.186l9.566-5.314m-9.566 7.5l9.566 5.314m0 0a2.25 2.25 0 103.935 2.186 2.25 2.25 0 00-3.935-2.186zm0-12.814a2.25 2.25 0 103.933-2.185 2.25 2.25 0 00-3.933 2.185z" />
                        </svg>
                        Album teilen
                    </button>
					<a href={ templ.URL(fmt.Sprintf("/user/albums/edit/%d", album.ID)) } class="btn btn-outline">
						<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 mr-2">
							<path stroke-linecap="round" stroke-linejoin="round" d="M16.862 4.487l1.687-1.688a1.875 1.875 0 112.652 2.652L6.832 19.82a4.5 4.5 0 01-1.897 1.13l-2.685.8.8-2.685a4.5 4.5 0 011.13-1.897L16.863 4.487zm0 0L19.5 7.125" />
						</svg>
						Bearbeiten
					</a>
				</div>
			</div>

		if len(albumImages) > 0 {
			<div class="masonry-container">
				for _, image := range albumImages {
					<div class="masonry-item">
						<div class="img-container relative">
							<a href={ templ.URL(fmt.Sprintf("/i/%s", image.ShareLink)) } class="block">
								<img src={ image.PreviewPath } alt={ image.Title } class="gallery-img" loading="lazy" />
							</a>
							<div class="overlay">
								<div class="image-title-overlay">{ image.Title }</div>
                            <div class="overlay-content flex flex-row gap-2">
                                <button type="button" class="view-btn image-view-btn" title="Ansehen" data-image-src={ image.OriginalPath }>
										<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
											<path stroke-linecap="round" stroke-linejoin="round" d="M2.036 12.322a1.012 1.012 0 0 1 0-.639C3.423 7.51 7.36 4.5 12 4.5c4.638 0 8.573 3.007 9.963 7.178.07.207.07.431 0 .639C20.577 16.49 16.64 19.5 12 19.5c-4.638 0-8.573-3.007-9.963-7.178Z" />
											<path stroke-linecap="round" stroke-linejoin="round" d="M15 12a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z" />
										</svg>
									</button>
                                <a href={ templ.URL(fmt.Sprintf("/i/%s", image.ShareLink)) } class="view-btn" title="Teilen">
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M7.217 10.907a2.25 2.25 0 100 2.186m0-2.186c.18.324.283.696.283 1.093s-.103.77-.283 1.093m0-2.186l9.566-5.314m-9.566 7.5l9.566 5.314m0 0a2.25 2.25 0 103.935 2.186 2.25 2.25 0 00-3.935-2.186zm0-12.814a2.25 2.25 0 103.933-2.185 2.25 2.25 0 00-3.933 2.185z" />
                                    </svg>
                                </a>
                                if album.CoverImageID != image.ID {
                                    <form method="POST" action={ templ.URL(fmt.Sprintf("/user/albums/%d/set-cover", album.ID)) }>
                                        <input type="hidden" name="_csrf" value={ csrfToken } />
                                        <input type="hidden" name="image_id" value={ fmt.Sprintf("%d", image.ID) } />
                                        <button type="submit" class="view-btn" title="Als Cover festlegen" aria-label="Als Cover festlegen">
                                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                                                <path stroke-linecap="round" stroke-linejoin="round" d="M17.593 3.594A1.5 1.5 0 0119 5.086V21l-7-3-7 3V5.086A1.5 1.5 0 016.407 3.594 48.42 48.42 0 0112 3c1.924 0 3.824.195 5.593.594z" />
                                            </svg>
                                        </button>
                                    </form>
                                } else {
                                    <span class="view-btn bg-primary text-white" title="Aktuelles Cover">
                                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                                            <path stroke-linecap="round" stroke-linejoin="round" d="M9 12.75 11.25 15 15 9.75M21 12A9 9 0 1 1 3 12a9 9 0 0 1 18 0Z" />
                                        </svg>
                                    </span>
                                }
                                <a href={ templ.URL(fmt.Sprintf("/user/albums/%d/remove-image/%d", album.ID, image.ID)) } 
                                   class="view-btn bg-red-500 hover:bg-red-600 text-white" title="Aus Album entfernen"
                                   onclick="return confirm('Möchten Sie dieses Bild aus dem Album entfernen?')">
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                                    </svg>
                                </a>
                            </div>
							</div>
						</div>
					</div>
				}
			</div>
		} else {
			<div class="flex flex-col items-center justify-center py-12">
				<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-16 h-16 mb-4 text-gray-400">
					<path stroke-linecap="round" stroke-linejoin="round" d="M2.25 15.75l5.159-5.159a2.25 2.25 0 013.182 0l5.159 5.159m-1.5-1.5l1.409-1.409a2.25 2.25 0 013.182 0l2.909 2.909m-18 3.75h16.5a1.5 1.5 0 001.5-1.5V6a1.5 1.5 0 00-1.5-1.5H3.75A1.5 1.5 0 002.25 6v12a1.5 1.5 0 001.5 1.5zm10.5-11.25h.008v.008h-.008V8.25zm.375 0a.375.375 0 11-.75 0 .375.375 0 01.75 0z" />
				</svg>
				<h3 class="text-xl font-semibold mb-2">Noch keine Bilder im Album</h3>
				<p class="text-gray-500 mb-4">Fügen Sie Bilder zu Ihrem Album hinzu.</p>
				<button class="btn btn-primary" onclick="document.getElementById('add-images-modal').showModal()">
					<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 mr-2">
						<path stroke-linecap="round" stroke-linejoin="round" d="M12 4.5v15m7.5-7.5h-15" />
					</svg>
					Erste Bilder hinzufügen
				</button>
			</div>
		}
	</div>

	<!-- Add Images Modal (Multi-Select) -->
    <!-- Share modal via SweetAlert2 (triggered in JS: openAlbumShare) -->
    <dialog id="add-images-modal" class="modal">
        <div class="modal-box w-11/12 max-w-4xl" id="add-images-modal-box" data-album-id={ fmt.Sprintf("%d", album.ID) } data-csrf={ csrfToken }>
            <div class="flex justify-between items-center mb-2">
                <h3 class="font-bold text-lg">Bilder zum Album hinzufügen</h3>
                <form method="dialog">
                    <button class="btn btn-sm btn-circle btn-ghost">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                        </svg>
                    </button>
                </form>
            </div>

            <div class="flex items-center justify-between mb-4">
                <p class="text-sm text-gray-600">Mehrfachauswahl möglich – klicke, um zu markieren.</p>
                <div class="flex items-center gap-3">
                    <span class="text-sm">Ausgewählt: <span id="selected-count">0</span></span>
                    <button id="add-selected-btn" type="button" class="btn btn-primary btn-sm" disabled>
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4 mr-1">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M12 4.5v15m7.5-7.5h-15" />
                        </svg>
                        Auswahl hinzufügen
                    </button>
                </div>
            </div>
            
            if len(userImages) > 0 {
                <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 max-h-96 overflow-y-auto">
                    for _, image := range userImages {
                        if !imageInAlbum(image, albumImages) {
                            <div class="relative group selectable-image cursor-pointer" data-image-id={ fmt.Sprintf("%d", image.ID) }>
                                <img src={ image.SmallPreviewPath } 
                                     alt={ image.Title } 
                                     class="w-full h-32 object-cover rounded-lg" />

                                <!-- visual selection ring -->
                                <div class="absolute inset-0 rounded-lg ring-4 ring-primary selection-ring hidden pointer-events-none"></div>

                                <!-- hover overlay -->
                                <div class="absolute inset-0 bg-transparent group-hover:bg-white/80 transition-all duration-200 rounded-lg flex items-center justify-center">
                                    <div class="opacity-0 group-hover:opacity-100 transition-opacity duration-200">
                                        <span class="btn btn-sm">Auswählen</span>
                                    </div>
                                </div>

                                <!-- selected badge -->
                                <div class="absolute top-2 left-2 selection-badge hidden">
                                    <div class="badge badge-primary text-white">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="w-3 h-3 mr-1" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-7.5 7.5a1 1 0 01-1.414 0l-3-3a1 1 0 111.414-1.414L8.5 12.086l6.793-6.793a1 1 0 011.414 0z" clip-rule="evenodd"/></svg>
                                        Ausgewählt
                                    </div>
                                </div>

                                <div class="absolute bottom-2 left-2 right-2">
                                    <p class="text-white text-xs font-medium bg-black/60 rounded px-2 py-1 truncate">{ image.Title }</p>
                                </div>
                            </div>
                        }
                    }
                </div>
            } else {
                <div class="text-center py-8">
                    <p class="text-gray-500">Sie haben noch keine Bilder hochgeladen.</p>
                    <a href="/" class="btn btn-primary mt-4">Erstes Bild hochladen</a>
                </div>
            }
        </div>
    </dialog>

	<!-- CSS for gallery (reuse from images.templ) -->
	<style>
		.masonry-container {
			column-count: 5;
			column-gap: 15px;
			width: 100%;
		}

		.masonry-item {
			break-inside: avoid;
			margin-bottom: 15px;
			display: block;
		}

		.img-container {
			position: relative;
			overflow: hidden;
			border-radius: 8px;
			box-shadow: 0 2px 4px rgba(0,0,0,0.1);
		}

		.gallery-img {
			width: 100%;
			display: block;
			transition: transform 0.3s ease;
		}

		.img-container:hover .gallery-img {
			transform: scale(1.03);
		}

		.overlay {
			position: absolute;
			top: 0;
			left: 0;
			right: 0;
			bottom: 0;
			background: rgba(0,0,0,0);
			transition: background 0.3s ease;
			display: flex;
			flex-direction: column;
			justify-content: space-between;
			padding: 12px;
		}

		.img-container:hover .overlay {
			background: rgba(0,0,0,0.3);
		}

		.image-title-overlay {
			color: white;
			font-weight: 500;
			text-shadow: 0 1px 2px rgba(0,0,0,0.8);
			opacity: 0;
			transition: opacity 0.3s ease;
			max-width: 100%;
			overflow: hidden;
			text-overflow: ellipsis;
			white-space: nowrap;
			padding: 5px;
			border-radius: 4px;
			background: rgba(0,0,0,0.3);
		}

		.img-container:hover .image-title-overlay {
			opacity: 1;
		}

		.overlay-content {
			display: flex;
			justify-content: center;
			opacity: 0;
			transition: opacity 0.3s ease;
		}

		.img-container:hover .overlay-content {
			opacity: 1;
		}

		.view-btn {
			background: white;
			border-radius: 50%;
			width: 36px;
			height: 36px;
			display: flex;
			align-items: center;
			justify-content: center;
			color: #333;
			border: none;
			cursor: pointer;
			box-shadow: 0 2px 4px rgba(0,0,0,0.2);
		}

		.view-btn:hover {
			background: #f0f0f0;
		}

		@media (max-width: 1400px) {
			.masonry-container {
				column-count: 4;
			}
		}

		@media (max-width: 1100px) {
			.masonry-container {
				column-count: 3;
			}
		}

		@media (max-width: 768px) {
			.masonry-container {
				column-count: 2;
			}
		}

		@media (max-width: 500px) {
			.masonry-container {
				column-count: 1;
			}
		}
	</style>
}

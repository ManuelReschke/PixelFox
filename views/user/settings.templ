package user_views

import (
    "github.com/ManuelReschke/PixelFox/views"
    "github.com/ManuelReschke/PixelFox/internal/pkg/viewmodel"

    "github.com/gofiber/fiber/v2"
)

templ SettingsIndex(
    username string,
    csrfToken string,
    plan string,
    canOrig bool,
    canWebp bool,
    canAvif bool,
    prefOrig bool,
    prefWebp bool,
    prefAvif bool,
) {
    <section class="card w-fit bg-base-200 shadow-xl mx-auto mb-8">
        <div class="card-body pb-2">
            <h1 class="card-title border-b border-b-slate-600 pb-[4px]">
                Einstellungen
            </h1>
            <div class="rounded-xl drop-shadow-xl flex flex-col gap-4 w-96 p-8">
                {{
                    planClass := "badge-ghost badge-outline"
                    planLabel := "Free"
                    if plan == "premium" {
                        planClass = "badge-primary"
                        planLabel = "Premium"
                    } else if plan == "premium_max" {
                        planClass = "badge-accent"
                        planLabel = "Premium‑Max"
                    }
                }}
                <div class="flex items-center justify-between mb-4">
                    <div class="flex items-center gap-3">
                        <div class="avatar placeholder">
                            <div class="bg-neutral text-neutral-content rounded-full w-10">
                                <span class="text-lg">⚙</span>
                            </div>
                        </div>
                        <div>
                            <h2 class="text-xl font-semibold">Einstellungen</h2>
                            <p class="text-sm opacity-70">Angemeldet als { username }</p>
                        </div>
                    </div>
                <div class="flex flex-col items-end gap-1 text-right">
                    <span class="text-xs opacity-70">Paket</span>
                    <div class={ templ.KV("badge "+planClass, true) }>{ planLabel }</div>
                </div>
                
                </div>

                <div class="divider"></div>

                <!-- Darstellung / Theme -->
                <div class="form-control">
                    <h3 class="text-lg font-medium mb-4">Darstellung</h3>
                    <label class="label cursor-pointer">
                        <span class="label-text">Dunkles Theme</span>
                        <input id="theme-toggle" type="checkbox" class="toggle toggle-primary" />
                    </label>
                </div>

                <div class="divider"></div>

                <form method="POST" action="/user/settings">
                    <input type="hidden" name="_csrf" value={ csrfToken }>
                    <div class="form-control">
                        <h3 class="text-lg font-medium mb-2">Thumbnails</h3>
                        {{
                            origTitle := ""
                            if !canOrig { origTitle = "Upgrade erforderlich oder global deaktiviert" }
                            webpTitle := ""
                            if !canWebp { webpTitle = "Upgrade erforderlich oder global deaktiviert" }
                            avifTitle := ""
                            if !canAvif { avifTitle = "Upgrade erforderlich oder global deaktiviert" }
                        }}
                        <label class="label cursor-pointer" title={ origTitle }>
                            <span class="label-text">Original‑Format</span>
                            if prefOrig {
                                <input type="checkbox" name="pref_thumb_original" class="toggle toggle-primary" checked disabled?={!canOrig} />
                            } else {
                                <input type="checkbox" name="pref_thumb_original" class="toggle toggle-primary" disabled?={!canOrig} />
                            }
                        </label>
                        <div class="text-xs opacity-70 ml-1 -mt-2 mb-2">Originalformat, keine zusätzliche Komprimierung.</div>
                        <label class="label cursor-pointer" title={ webpTitle }>
                            <span class="label-text">WebP</span>
                            if prefWebp {
                                <input type="checkbox" name="pref_thumb_webp" class="toggle toggle-primary" checked disabled?={!canWebp} />
                            } else {
                                <input type="checkbox" name="pref_thumb_webp" class="toggle toggle-primary" disabled?={!canWebp} />
                            }
                        </label>
                        <div class="text-xs opacity-70 ml-1 -mt-2 mb-2">Spart bis zu 70% Speicherplatz.</div>
                        <label class="label cursor-pointer" title={ avifTitle }>
                            <span class="label-text">AVIF</span>
                            if prefAvif {
                                <input type="checkbox" name="pref_thumb_avif" class="toggle toggle-primary" checked disabled?={!canAvif} />
                            } else {
                                <input type="checkbox" name="pref_thumb_avif" class="toggle toggle-primary" disabled?={!canAvif} />
                            }
                        </label>
                        <div class="text-xs opacity-70 ml-1 -mt-2 mb-2">Spart bis zu 90% Speicherplatz.</div>
                        if !canWebp || !canAvif {
                            <div class="text-xs opacity-70 mt-2">Hinweis: Einige Formate sind in deinem Paket nicht verfügbar.</div>
                        }
                    </div>

                    <div class="divider"></div>

                    <div class="card-actions justify-end">
                        <a href="/user/profile" class="btn btn-secondary">Zum Profil</a>
                        <button type="submit" class="btn btn-primary">Speichern</button>
                    </div>
                </form>

            </div>
        </div>
    </section>
}

templ Settings(
    page string,
    fromProtected bool,
    isError bool,
    msg fiber.Map,
    username string,
    plan string,
    cmp templ.Component,
    isAdmin bool,
) {
    @views.Layout(viewmodel.Layout{
        Page:          page,
        FromProtected: fromProtected,
        IsError:       isError,
        Msg:           msg,
        Username:      username,
        IsAdmin:       isAdmin,
        OGViewModel:   nil,
        Plan:          plan,
    }) {
        @cmp
    }
}

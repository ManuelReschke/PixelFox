package user_views

import (
	"github.com/ManuelReschke/PixelFox/views"
	"github.com/ManuelReschke/PixelFox/internal/pkg/viewmodel"
	"github.com/ManuelReschke/PixelFox/app/models"
	"github.com/ManuelReschke/PixelFox/internal/pkg/utils"
	"fmt"

	"github.com/gofiber/fiber/v2"
)

// formatBytes formats bytes to a human-readable string (KB, MB, GB)
func formatBytes(bytes int64) string {
	const unit = 1024
	if bytes < unit {
		return fmt.Sprintf("%d B", bytes)
	}
	div, exp := int64(unit), 0
	for n := bytes / unit; n >= unit; n /= unit {
		div *= unit
		exp++
	}
	return fmt.Sprintf("%.1f %cB", float64(bytes)/float64(div), "KMGTPE"[exp])
}

templ ProfileIndex(username string, csrfToken string, user models.User, imageCount int, albumCount int, storageUsage int64) {
	<section class="card w-fit bg-base-200 shadow-xl mx-auto mb-8">
		<div class="card-body pb-2">
			<h1 class="card-title border-b border-b-slate-600 pb-[4px]">
				Benutzerprofil
			</h1>
			<div class="rounded-xl drop-shadow-xl flex flex-col gap-4 w-[600px] p-8">
				<!-- Avatar und Benutzerinfo nebeneinander -->
				<div class="flex flex-row gap-8 items-start">
					<!-- Linke Seite: Avatar -->
					<div class="flex flex-col items-center">
						<div class="avatar mb-4">
							<div class="w-24 rounded-full ring ring-primary ring-offset-base-100 ring-offset-2 relative group">
								<img src={ utils.GetGravatarURL(user.Email, 200) } alt={ username } />
								<a href="https://gravatar.com" target="_blank" class="absolute inset-0 bg-black bg-opacity-50 rounded-full flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity duration-300">
									<span class="text-white font-medium">Ändern</span>
								</a>
							</div>
						</div>
						<h2 class="text-xl font-semibold">{ username }</h2>
					</div>
					
					<!-- Rechte Seite: Benutzerinfo -->
					<div class="flex flex-col gap-3 flex-1">
						<div class="flex flex-col">
							<span class="text-sm opacity-70">E-Mail</span>
							<span class="font-medium">{ user.Email }</span>
							<div class="mt-1">
								if user.Status == "active" {
									<span class="badge badge-success">Bestätigt</span>
								} else {
									<span class="badge badge-warning">Nicht bestätigt</span>
								}
							</div>
						</div>

						<div class="flex flex-col">
							<span class="text-sm opacity-70">Account erstellt am</span>
							<span class="font-medium">{ user.CreatedAt.Format("02.01.2006") }</span>
						</div>

						if user.LastLoginAt != nil {
							<div class="flex flex-col">
								<span class="text-sm opacity-70">Letzter Login</span>
								<span class="font-medium">{ user.LastLoginAt.Format("02.01.2006 15:04") }</span>
							</div>
						}
					</div>
				</div>

				<div class="divider"></div>

				<div class="stats shadow">
					<div class="stat">
						<div class="stat-figure text-secondary">
							<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="inline-block w-8 h-8 stroke-current">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
							</svg>
						</div>
						<div class="stat-title">Bilder</div>
						<div class="stat-value">{ fmt.Sprintf("%d", imageCount) }</div>
					</div>
					
					<div class="stat">
						<div class="stat-figure text-secondary">
							<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="inline-block w-8 h-8 stroke-current">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
							</svg>
						</div>
						<div class="stat-title">Alben</div>
						<div class="stat-value">{ fmt.Sprintf("%d", albumCount) }</div>
					</div>
				</div>

				<div class="stats shadow">
					<div class="stat">
						<div class="stat-figure text-secondary">
							<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="inline-block w-8 h-8 stroke-current">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h18v18H3V3zm16 14V7H5v10h14z"></path>
							</svg>
						</div>
						<div class="stat-title">Speicherplatz</div>
						<div class="stat-value text-primary">{ formatBytes(storageUsage) }</div>
					</div>
				</div>

				<div class="divider"></div>

				<div class="card-actions justify-end">
					<a href="/user/settings" class="btn btn-secondary">Einstellungen</a>
					<a href="/" class="btn btn-primary">Zurück zur Startseite</a>
				</div>
			</div>
		</div>
	</section>
}

templ Profile(
	page string,
	fromProtected bool,
	isError bool,
	msg fiber.Map,
	username string,
	cmp templ.Component,
	isAdmin bool,
) {
 	@views.Layout(viewmodel.Layout{
         Page:          page,
         FromProtected: fromProtected,
         IsError:       isError,
         Msg:           msg,
         Username:      username,
         IsAdmin:       isAdmin,
         OGViewModel:   nil,
     }) {
 		@cmp
 	}
}

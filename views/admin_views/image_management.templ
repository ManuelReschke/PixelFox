package admin_views

import (
	"fmt"
	"path/filepath"
	"github.com/ManuelReschke/PixelFox/app/models"
	"github.com/ManuelReschke/PixelFox/internal/pkg/imageprocessor"
)

// Format file size to human-readable format
func formatFileSize(size int64) string {
	const unit = 1024
	if size < unit {
		return fmt.Sprintf("%d B", size)
	}
	div, exp := int64(unit), 0
	for n := size / unit; n >= unit; n /= unit {
		div *= unit
		exp++
	}
	return fmt.Sprintf("%.1f %cB", float64(size)/float64(div), "KMGTPE"[exp])
}

// getThumbnailPath returns the best available thumbnail path with fallback
func getThumbnailPath(image models.Image) string {
	// Get variant info for this image
	variantInfo, err := imageprocessor.GetImageVariantInfo(image.ID)
	if err != nil {
		// Fallback to original if no variant info available
		return "/" + filepath.Join(image.FilePath, image.FileName)
	}

	// Try small thumbnails with priority: AVIF -> WebP -> Original format
	if variantInfo.HasThumbnailSmall {
		if avifPath := imageprocessor.GetImageURL(&image, "avif", "small"); avifPath != "" {
			return avifPath
		}
		if webpPath := imageprocessor.GetImageURL(&image, "webp", "small"); webpPath != "" {
			return webpPath
		}
		if originalPath := imageprocessor.GetImageURL(&image, "original", "small"); originalPath != "" {
			return originalPath
		}
	}

	// Final fallback to original image
	return "/" + filepath.Join(image.FilePath, image.FileName)
}

templ imageContent(images []models.Image, currentPage int, totalPages int) {
	<div class="mb-6">
		<h1 class="text-2xl font-bold">Bilderverwaltung</h1>
	</div>

	<!-- Image List -->
	<div class="bg-base-200 shadow-md rounded-lg overflow-hidden">
		<div class="overflow-x-auto">
			<table class="min-w-full divide-y divide-base-300">
				<thead class="bg-base-300">
					<tr>
						<th scope="col" class="px-6 py-3 text-left text-xs font-medium opacity-75 uppercase tracking-wider">Vorschau</th>
						<th scope="col" class="px-6 py-3 text-left text-xs font-medium opacity-75 uppercase tracking-wider">Details</th>
						<th scope="col" class="px-6 py-3 text-left text-xs font-medium opacity-75 uppercase tracking-wider">Statistiken</th>
						<th scope="col" class="px-6 py-3 text-left text-xs font-medium opacity-75 uppercase tracking-wider">Benutzer</th>
						<th scope="col" class="px-6 py-3 text-left text-xs font-medium opacity-75 uppercase tracking-wider">Aktionen</th>
					</tr>
				</thead>
				<tbody class="divide-y divide-base-300">
					<!-- No images message -->
					if len(images) == 0 {
						<tr>
							<td colspan="5" class="px-6 py-4 text-center opacity-75">Keine Bilder gefunden</td>
						</tr>
					}

					<!-- Image rows -->
					for _, image := range images {
						<tr>
							<!-- Preview -->
							<td class="px-6 py-4 whitespace-nowrap">
								<div class="flex-shrink-0 h-20 w-20">
									<a href={ templ.SafeURL("/image/" + image.UUID) } target="_blank">
										<img class="h-20 w-20 object-cover rounded-md" 
											src={ getThumbnailPath(image) } 
											alt={ image.Title }/>
									</a>
								</div>
							</td>

							<!-- Details -->
							<td class="px-6 py-4">
								<div class="text-sm font-medium truncate max-w-xs">
									<span class="font-bold">Titel:</span> { image.Title }
								</div>
								<div class="text-sm opacity-75 mt-1">
									<span class="font-medium">UUID:</span> { image.UUID }
								</div>
								<div class="text-sm opacity-75 mt-1">
									<span class="font-medium">Typ:</span> { image.FileType }
								</div>
								<div class="text-sm opacity-75 mt-1">
									<span class="font-medium">Größe:</span> { formatFileSize(image.FileSize) }
								</div>
								<div class="text-sm opacity-75 mt-1">
									<span class="font-medium">Abmessungen:</span> { fmt.Sprintf("%dx%d", image.Width, image.Height) }
								</div>
								<div class="text-sm opacity-75 mt-1">
									<span class="font-medium">Öffentlich:</span> 
									if image.IsPublic {
										<span class="text-green-600">Ja</span>
									} else {
										<span class="text-red-600">Nein</span>
									}
								</div>
								<div class="text-sm opacity-75 mt-1">
									<span class="font-medium">Teilen-Link:</span> 
									<a href={ templ.SafeURL("/i/" + image.ShareLink) } target="_blank" class="text-blue-600 hover:underline">{ image.ShareLink }</a>
								</div>
							</td>

							<!-- Stats -->
							<td class="px-6 py-4 whitespace-nowrap">
								<div class="text-sm">
									<span class="font-medium">Aufrufe:</span> { fmt.Sprintf("%d", image.ViewCount) }
								</div>
								<div class="text-sm opacity-75 mt-1">
									<span class="font-medium">Downloads:</span> { fmt.Sprintf("%d", image.DownloadCount) }
								</div>
								<div class="text-sm opacity-75 mt-1">
									<span class="font-medium">Erstellt:</span> { image.CreatedAt.Format("2006-01-02 15:04") }
								</div>
							</td>

							<!-- User -->
							<td class="px-6 py-4 whitespace-nowrap">
								<div class="text-sm font-medium">
									{ image.User.Name }
								</div>
								<div class="text-sm opacity-75">
									{ image.User.Email }
								</div>
							</td>

							<!-- Actions -->
							<td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
								<div class="flex flex-col space-y-2">
									<a href={ templ.SafeURL("/admin/images/edit/" + image.UUID) } class="text-indigo-600 hover:text-indigo-900">Bearbeiten</a>
									<a href={ templ.SafeURL("/admin/images/delete/" + image.UUID) } class="text-red-600 hover:text-red-900" onclick="return confirm('Bist du sicher, dass du dieses Bild löschen möchtest? Diese Aktion kann nicht rückgängig gemacht werden.');">Löschen</a>
									<a href={ templ.SafeURL("/image/" + image.UUID) } target="_blank" class="text-blue-600 hover:text-blue-900">Ansehen</a>
								</div>
							</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	</div>

	<!-- Pagination -->
	if totalPages > 1 {
		<div class="flex justify-center mt-6">
			<nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
				<!-- Previous Page -->
				if currentPage > 1 {
					<a href={ templ.SafeURL(fmt.Sprintf("/admin/images?page=%d", currentPage-1)) } class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-base-300 bg-base-200 text-sm font-medium hover:bg-base-300">
						<span class="sr-only">Zurück</span>
						<svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
							<path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
						</svg>
					</a>
				} else {
					<span class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-base-300 bg-base-300 text-sm font-medium opacity-50">
						<span class="sr-only">Zurück</span>
						<svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
							<path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
						</svg>
					</span>
				}

				<!-- Page numbers -->
				for i := 1; i <= totalPages; i++ {
					if i == currentPage {
						<span class="relative inline-flex items-center px-4 py-2 border border-indigo-500 bg-indigo-100 dark:bg-indigo-900 text-sm font-medium text-indigo-600 dark:text-indigo-300">
							{ fmt.Sprintf("%d", i) }
						</span>
					} else {
						<a href={ templ.SafeURL(fmt.Sprintf("/admin/images?page=%d", i)) } class="relative inline-flex items-center px-4 py-2 border border-base-300 bg-base-200 text-sm font-medium hover:bg-base-300">
							{ fmt.Sprintf("%d", i) }
						</a>
					}
				}

				<!-- Next Page -->
				if currentPage < totalPages {
					<a href={ templ.SafeURL(fmt.Sprintf("/admin/images?page=%d", currentPage+1)) } class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-base-300 bg-base-200 text-sm font-medium hover:bg-base-300">
						<span class="sr-only">Weiter</span>
						<svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
							<path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
						</svg>
					</a>
				} else {
					<span class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-base-300 bg-base-300 text-sm font-medium opacity-50">
						<span class="sr-only">Weiter</span>
						<svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
							<path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
						</svg>
					</span>
				}
			</nav>
		</div>
	}
}

templ ImageManagement(images []models.Image, currentPage int, totalPages int) {
	@AdminLayout(imageContent(images, currentPage, totalPages))
}

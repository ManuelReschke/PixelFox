package admin_views

import (
	"fmt"
	"path/filepath"
	"github.com/ManuelReschke/PixelFox/app/models"
	"github.com/ManuelReschke/PixelFox/internal/pkg/imageprocessor"
)

// Format file size to human-readable format
func formatFileSize(size int64) string {
	const unit = 1024
	if size < unit {
		return fmt.Sprintf("%d B", size)
	}
	div, exp := int64(unit), 0
	for n := size / unit; n >= unit; n /= unit {
		div *= unit
		exp++
	}
	return fmt.Sprintf("%.1f %cB", float64(size)/float64(div), "KMGTPE"[exp])
}

// getThumbnailPath returns the best available thumbnail path with fallback
func getThumbnailPath(image models.Image) string {
	// Get variant info for this image
	variantInfo, err := imageprocessor.GetImageVariantInfo(image.ID)
	if err != nil {
		// Fallback to original if no variant info available
		return "/" + filepath.Join(image.FilePath, image.FileName)
	}

	// Try small thumbnails with priority: AVIF -> WebP -> Original format
	if variantInfo.HasThumbnailSmall {
		if avifPath := imageprocessor.GetImageURL(&image, "avif", "small"); avifPath != "" {
			return avifPath
		}
		if webpPath := imageprocessor.GetImageURL(&image, "webp", "small"); webpPath != "" {
			return webpPath
		}
		if originalPath := imageprocessor.GetImageURL(&image, "original", "small"); originalPath != "" {
			return originalPath
		}
	}

	// Final fallback to original image
	return "/" + filepath.Join(image.FilePath, image.FileName)
}

templ imageContent(images []models.Image, currentPage int, totalPages int) {
	<div class="mb-6">
		<h1 class="text-2xl font-bold">Bilderverwaltung</h1>
	</div>

	<!-- No images message -->
	if len(images) == 0 {
		<div class="bg-base-200 shadow-md rounded-lg p-8 text-center">
			<div class="text-6xl opacity-25 mb-4">üì∑</div>
			<p class="text-lg opacity-75">Keine Bilder gefunden</p>
		</div>
	} else {
		<!-- Image Grid -->
		<div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 xl:grid-cols-8 2xl:grid-cols-10 gap-4">
			for _, image := range images {
				<div class="group relative bg-base-200 rounded-lg shadow-sm hover:shadow-lg transition-all duration-200 overflow-hidden">
					<!-- Image Container with Fixed Aspect Ratio -->
					<div class="aspect-square relative overflow-hidden bg-base-300">
						<img 
							class="w-full h-full object-cover transition-transform duration-200 group-hover:scale-105" 
							src={ getThumbnailPath(image) } 
							alt={ image.Title }
							loading="lazy"
						/>
						
						<!-- Overlay with Image Info on Hover -->
						<div class="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-60 transition-all duration-200 flex items-center justify-center opacity-0 group-hover:opacity-100">
							<div class="text-white text-center p-2">
								<div class="text-xs font-medium truncate mb-1">{ image.Title }</div>
								<div class="text-xs opacity-75">{ image.User.Name }</div>
								<div class="text-xs opacity-75">{ fmt.Sprintf("%dx%d", image.Width, image.Height) }</div>
								<div class="text-xs opacity-75">{ formatFileSize(image.FileSize) }</div>
							</div>
						</div>

						<!-- Status Badges -->
						<div class="absolute top-2 left-2 flex gap-1">
							if image.IsPublic {
								<div class="badge badge-success badge-xs">√ñffentlich</div>
							} else {
								<div class="badge badge-warning badge-xs flex items-center gap-1">
									<svg xmlns="http://www.w3.org/2000/svg" class="h-2.5 w-2.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
									</svg>
								</div>
							}
							if image.ViewCount > 0 {
								<div class="badge badge-info badge-xs flex items-center gap-1">
									<svg xmlns="http://www.w3.org/2000/svg" class="h-2.5 w-2.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
									</svg>
									{ fmt.Sprintf("%d", image.ViewCount) }
								</div>
							}
						</div>
					</div>

					<!-- Action Icons -->
					<div class="p-3 bg-base-100">
						<div class="flex justify-center gap-2">
							<!-- View -->
							<div class="tooltip" data-tip="Ansehen">
								<a 
									href={ templ.SafeURL("/image/" + image.UUID) } 
									target="_blank" 
									class="btn btn-ghost btn-sm btn-circle text-blue-600 hover:bg-blue-100 hover:text-blue-800"
								>
									<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
									</svg>
								</a>
							</div>

							<!-- Edit -->
							<div class="tooltip" data-tip="Bearbeiten">
								<a 
									href={ templ.SafeURL("/admin/images/edit/" + image.UUID) } 
									class="btn btn-ghost btn-sm btn-circle text-orange-600 hover:bg-orange-100 hover:text-orange-800"
								>
									<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
									</svg>
								</a>
							</div>

							<!-- Delete -->
							<div class="tooltip" data-tip="L√∂schen">
								<a 
									href={ templ.SafeURL("/admin/images/delete/" + image.UUID) } 
									class="btn btn-ghost btn-sm btn-circle text-red-600 hover:bg-red-100 hover:text-red-800"
									onclick="return confirm('Bist du sicher, dass du dieses Bild l√∂schen m√∂chtest? Diese Aktion kann nicht r√ºckg√§ngig gemacht werden.');"
								>
									<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
									</svg>
								</a>
							</div>

							<!-- More Info Dropdown -->
							<div class="dropdown dropdown-end">
								<div class="tooltip" data-tip="Details">
									<label tabindex="0" class="btn btn-ghost btn-sm btn-circle text-gray-600 hover:bg-gray-100">
										<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z" />
										</svg>
									</label>
								</div>
								<div tabindex="0" class="dropdown-content card card-compact w-80 p-4 shadow-lg bg-base-100 text-base-content">
									<div class="card-body p-0">
										<h3 class="font-bold text-sm mb-2 truncate">{ image.Title }</h3>
										<div class="text-xs space-y-1">
											<div><span class="font-medium">UUID:</span> <span class="font-mono text-xs break-all">{ image.UUID }</span></div>
											<div><span class="font-medium">Typ:</span> { image.FileType }</div>
											<div><span class="font-medium">Gr√∂√üe:</span> { formatFileSize(image.FileSize) }</div>
											<div><span class="font-medium">Abmessungen:</span> { fmt.Sprintf("%dx%d", image.Width, image.Height) }</div>
											<div><span class="font-medium">Benutzer:</span> { image.User.Name } ({ image.User.Email })</div>
											<div><span class="font-medium">Aufrufe:</span> { fmt.Sprintf("%d", image.ViewCount) }</div>
											<div><span class="font-medium">Downloads:</span> { fmt.Sprintf("%d", image.DownloadCount) }</div>
											<div><span class="font-medium">Erstellt:</span> { image.CreatedAt.Format("02.01.2006 15:04") }</div>
											<div><span class="font-medium">Share-Link:</span> 
												<a href={ templ.SafeURL("/i/" + image.ShareLink) } target="_blank" class="text-blue-600 hover:underline font-mono text-xs break-all">{ image.ShareLink }</a>
											</div>
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
			}
		</div>
	}

	<!-- Pagination -->
	if totalPages > 1 {
		<div class="flex justify-center mt-6">
			<nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
				<!-- Previous Page -->
				if currentPage > 1 {
					<a href={ templ.SafeURL(fmt.Sprintf("/admin/images?page=%d", currentPage-1)) } class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-base-300 bg-base-200 text-sm font-medium hover:bg-base-300">
						<span class="sr-only">Zur√ºck</span>
						<svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
							<path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
						</svg>
					</a>
				} else {
					<span class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-base-300 bg-base-300 text-sm font-medium opacity-50">
						<span class="sr-only">Zur√ºck</span>
						<svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
							<path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
						</svg>
					</span>
				}

				<!-- Page numbers -->
				for i := 1; i <= totalPages; i++ {
					if i == currentPage {
						<span class="relative inline-flex items-center px-4 py-2 border border-indigo-500 bg-indigo-100 dark:bg-indigo-900 text-sm font-medium text-indigo-600 dark:text-indigo-300">
							{ fmt.Sprintf("%d", i) }
						</span>
					} else {
						<a href={ templ.SafeURL(fmt.Sprintf("/admin/images?page=%d", i)) } class="relative inline-flex items-center px-4 py-2 border border-base-300 bg-base-200 text-sm font-medium hover:bg-base-300">
							{ fmt.Sprintf("%d", i) }
						</a>
					}
				}

				<!-- Next Page -->
				if currentPage < totalPages {
					<a href={ templ.SafeURL(fmt.Sprintf("/admin/images?page=%d", currentPage+1)) } class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-base-300 bg-base-200 text-sm font-medium hover:bg-base-300">
						<span class="sr-only">Weiter</span>
						<svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
							<path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
						</svg>
					</a>
				} else {
					<span class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-base-300 bg-base-300 text-sm font-medium opacity-50">
						<span class="sr-only">Weiter</span>
						<svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
							<path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
						</svg>
					</span>
				}
			</nav>
		</div>
	}
}

templ ImageManagement(images []models.Image, currentPage int, totalPages int) {
	@AdminLayout(imageContent(images, currentPage, totalPages))
}

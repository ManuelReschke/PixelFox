// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.943
package admin_views

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"fmt"
	"github.com/ManuelReschke/PixelFox/app/models"
	"github.com/ManuelReschke/PixelFox/internal/pkg/env"
)

func settingsContent(settings models.AppSettings, csrfToken string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"max-w-4xl mx-auto\"><div class=\"flex items-center justify-between mb-6\"><h1 class=\"text-3xl font-bold\">Systemeinstellungen</h1></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if env.GetEnv("UPLOAD_TOKEN_SECRET", "") == "" {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<div class=\"alert alert-warning mb-4\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 9v2m0 4h.01M4.93 4.93a10 10 0 1014.14 14.14A10 10 0 004.93 4.93z\"></path></svg> <span>Hinweis: Direct‑to‑Storage benötigt ein gesetztes `UPLOAD_TOKEN_SECRET` (ENV). Ohne Secret werden Upload‑Sessions nicht ausgestellt.</span></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "<div class=\"bg-base-100 rounded-lg shadow-md p-6\"><form hx-post=\"/admin/settings\" hx-target=\"body\" hx-push-url=\"true\" method=\"POST\" action=\"/admin/settings\" class=\"space-y-6\"><input type=\"hidden\" name=\"_csrf\" value=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 string
		templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(csrfToken)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/admin_views/settings.templ`, Line: 33, Col: 55}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "\"><!-- Site Title --><div class=\"form-control\"><label class=\"label\"><span class=\"label-text font-semibold\">Seitentitel</span></label> <input type=\"text\" name=\"site_title\" value=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var3 string
		templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(settings.SiteTitle)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/admin_views/settings.templ`, Line: 43, Col: 32}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "\" class=\"input input-bordered w-full\" placeholder=\"Seitentitel eingeben\" required> <label class=\"label\"><span class=\"label-text-alt\">Dieser Titel wird in der Navigation und im Browser-Titel angezeigt.</span></label></div><!-- Site Description --><div class=\"form-control\"><label class=\"label\"><span class=\"label-text font-semibold\">Seitenbeschreibung</span></label> <textarea name=\"site_description\" class=\"textarea textarea-bordered h-24\" placeholder=\"Seitenbeschreibung eingeben\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var4 string
		templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(settings.SiteDescription)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/admin_views/settings.templ`, Line: 62, Col: 32}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "</textarea> <label class=\"label\"><span class=\"label-text-alt\">Diese Beschreibung wird für Meta-Tags und SEO verwendet.</span></label></div><!-- Image Upload Settings --><div class=\"divider\">Bild-Upload Einstellungen</div><div class=\"form-control\"><label class=\"label cursor-pointer\"><span class=\"label-text font-semibold\">Bild-Upload aktivieren</span> <input type=\"checkbox\" name=\"image_upload_enabled\" class=\"checkbox\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if settings.ImageUploadEnabled {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, " checked")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "></label> <label class=\"label\"><span class=\"label-text-alt\">Wenn deaktiviert, können Benutzer keine neuen Bilder hochladen.</span></label></div><div class=\"form-control\"><label class=\"label cursor-pointer\"><span class=\"label-text font-semibold\">Direct-to-Storage Upload aktivieren</span> <input type=\"checkbox\" name=\"direct_upload_enabled\" class=\"checkbox\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if settings.DirectUploadEnabled {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, " checked")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 10, "></label> <label class=\"label\"><span class=\"label-text-alt\">Uploads gehen direkt an den ausgewählten Storage-Pool (schneller, entlastet den App‑Server). Fallback bei Fehler automatisch.</span> ")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if env.GetEnv("UPLOAD_TOKEN_SECRET", "") == "" {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 11, "<span class=\"label-text-alt text-error\">Erfordert ein gesetztes UPLOAD_TOKEN_SECRET in der Umgebung.</span>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 12, "</label></div><!-- Replication/Storage Settings --><div class=\"divider\">Replikation/Storage</div><div class=\"form-control\"><label class=\"label cursor-pointer\"><span class=\"label-text font-semibold\">Checksum bei Replikation erzwingen</span> <input type=\"checkbox\" name=\"replication_require_checksum\" class=\"checkbox\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if settings.ReplicationRequireChecksum {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 13, " checked")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 14, "></label> <label class=\"label\"><span class=\"label-text-alt\">Validiert jede Server‑zu‑Server Replikation per SHA‑256 und bricht bei Mismatch ab (empfohlen).</span></label> <label class=\"label\"><span class=\"label-text-alt\">Hinweis: Der interne „Move to Pool“-Job sendet die Checksumme immer mit. Externe Replikations‑Clients müssen das Feld <code>sha256</code> im Request setzen.</span></label></div><!-- Tiering (Hot/Warm/Cold) Phase A --><div class=\"divider\">Automatisches Tiering (Hot → Warm/Cold)</div><div class=\"form-control\"><label class=\"label cursor-pointer\"><span class=\"label-text font-semibold\">Tiering aktivieren</span> <input type=\"checkbox\" name=\"tiering_enabled\" class=\"checkbox\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if settings.TieringEnabled {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 15, " checked")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 16, "></label> <label class=\"label\"><span class=\"label-text-alt\">Inaktive Bilder werden automatisch aus Hot‑Storage in niedrigere Tiers verschoben.</span></label></div><div class=\"grid grid-cols-1 md:grid-cols-2 gap-4\"><div class=\"form-control\"><label class=\"label\"><span class=\"label-text font-semibold\">Mindestaufenthalt in Hot nach Upload (Tage)</span></label> <input type=\"number\" name=\"hot_keep_days_after_upload\" value=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var5 string
		templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d", settings.HotKeepDaysAfterUpload))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/admin_views/settings.templ`, Line: 155, Col: 119}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 17, "\" class=\"input input-bordered w-full\" placeholder=\"7\" min=\"0\" max=\"3650\" required> <label class=\"label\"><span class=\"label-text-alt\">Bilder verbleiben mindestens so lange in Hot, unabhängig von Views.</span></label></div><div class=\"form-control\"><label class=\"label\"><span class=\"label-text font-semibold\">Demote wenn keine Views seit (Tage)</span></label> <input type=\"number\" name=\"demote_if_no_views_days\" value=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var6 string
		templ_7745c5c3_Var6, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d", settings.DemoteIfNoViewsDays))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/admin_views/settings.templ`, Line: 163, Col: 113}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var6))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 18, "\" class=\"input input-bordered w-full\" placeholder=\"30\" min=\"0\" max=\"3650\" required> <label class=\"label\"><span class=\"label-text-alt\">Wenn seit X Tagen keine Views stattfanden (oder nie), demote in Warm/Cold.</span></label></div></div><div class=\"grid grid-cols-1 md:grid-cols-3 gap-4\"><div class=\"form-control\"><label class=\"label\"><span class=\"label-text font-semibold\">Min. Verweildauer je Tier (Tage)</span></label> <input type=\"number\" name=\"min_dwell_days_per_tier\" value=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var7 string
		templ_7745c5c3_Var7, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d", settings.MinDwellDaysPerTier))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/admin_views/settings.templ`, Line: 173, Col: 113}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var7))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 19, "\" class=\"input input-bordered w-full\" placeholder=\"7\" min=\"0\" max=\"3650\" required> <label class=\"label\"><span class=\"label-text-alt\">Schutz vor Ping‑Pong (künftige Verwendung, Phase B).</span></label></div><div class=\"form-control\"><label class=\"label\"><span class=\"label-text font-semibold\">Hot Watermark HIGH (%)</span></label> <input type=\"number\" name=\"hot_watermark_high\" value=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var8 string
		templ_7745c5c3_Var8, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d", settings.HotWatermarkHigh))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/admin_views/settings.templ`, Line: 181, Col: 105}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var8))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 20, "\" class=\"input input-bordered w-full\" placeholder=\"80\" min=\"1\" max=\"100\" required> <label class=\"label\"><span class=\"label-text-alt\">Ab dieser Hot‑Auslastung wird zusätzlich demotet (Hysterese).</span></label></div><div class=\"form-control\"><label class=\"label\"><span class=\"label-text font-semibold\">Hot Watermark LOW (%)</span></label> <input type=\"number\" name=\"hot_watermark_low\" value=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var9 string
		templ_7745c5c3_Var9, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d", settings.HotWatermarkLow))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/admin_views/settings.templ`, Line: 189, Col: 103}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var9))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 21, "\" class=\"input input-bordered w-full\" placeholder=\"65\" min=\"0\" max=\"100\" required> <label class=\"label\"><span class=\"label-text-alt\">Unterhalb dieses Werts endet der Demote‑Druck (nächste Sweeps).</span></label></div></div><div class=\"grid grid-cols-1 md:grid-cols-2 gap-4\"><div class=\"form-control\"><label class=\"label\"><span class=\"label-text font-semibold\">Max. Kandidaten pro Sweep</span></label> <input type=\"number\" name=\"max_tiering_candidates_per_sweep\" value=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var10 string
		templ_7745c5c3_Var10, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d", settings.MaxTieringCandidatesPerSweep))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/admin_views/settings.templ`, Line: 199, Col: 131}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var10))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 22, "\" class=\"input input-bordered w-full\" placeholder=\"200\" min=\"1\" max=\"100000\" required> <label class=\"label\"><span class=\"label-text-alt\">Begrenzt die Anzahl verschobener Bilder pro Sweep (Backpressure).</span></label></div><div class=\"form-control\"><label class=\"label\"><span class=\"label-text font-semibold\">Sweep Intervall (Minuten)</span></label> <input type=\"number\" name=\"tiering_sweep_interval_minutes\" value=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var11 string
		templ_7745c5c3_Var11, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d", settings.TieringSweepIntervalMinutes))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/admin_views/settings.templ`, Line: 207, Col: 128}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var11))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 23, "\" class=\"input input-bordered w-full\" placeholder=\"15\" min=\"1\" max=\"1440\" required> <label class=\"label\"><span class=\"label-text-alt\">Wie oft soll das Tiering prüfen/demoten?</span></label></div></div><!-- API Einstellungen --><div class=\"divider\">API</div><div class=\"form-control\"><label class=\"label\"><span class=\"label-text font-semibold\">API Rate Limit (Requests/Minute)</span></label> <input type=\"number\" name=\"api_rate_limit_per_minute\" value=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var12 string
		templ_7745c5c3_Var12, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d", settings.APIRateLimitPerMinute))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/admin_views/settings.templ`, Line: 221, Col: 63}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var12))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 24, "\" class=\"input input-bordered w-full\" placeholder=\"120\" min=\"0\" max=\"100000\" required> <label class=\"label\"><span class=\"label-text-alt\">Globales API‑Limit für Routen unter <code>/api</code> (0 = unbegrenzt). Änderungen greifen nach einem Neustart des App‑Servers.</span></label></div><div class=\"form-control\"><label class=\"label\"><span class=\"label-text font-semibold\">API Upload Rate Limit (Uploads/Minute)</span></label> <input type=\"number\" name=\"upload_rate_limit_per_minute\" value=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var13 string
		templ_7745c5c3_Var13, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d", settings.UploadRateLimitPerMinute))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/admin_views/settings.templ`, Line: 240, Col: 66}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var13))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 25, "\" class=\"input input-bordered w-full\" placeholder=\"60\" min=\"0\" max=\"100000\" required> <label class=\"label\"><span class=\"label-text-alt\">Maximale Anzahl an Uploads pro Minute pro IP am Storage‑Endpoint. 0 = kein Limit.</span></label></div><div class=\"form-control\"><label class=\"label\"><span class=\"label-text font-semibold\">API Upload Rate Limit pro Benutzer (Uploads/Minute)</span></label> <input type=\"number\" name=\"upload_user_rate_limit_per_minute\" value=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var14 string
		templ_7745c5c3_Var14, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d", settings.UploadUserRateLimitPerMinute))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/admin_views/settings.templ`, Line: 259, Col: 70}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var14))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 26, "\" class=\"input input-bordered w-full\" placeholder=\"60\" min=\"0\" max=\"100000\" required> <label class=\"label\"><span class=\"label-text-alt\">Zusätzliches Limit pro Benutzer-ID am Storage‑Endpoint. 0 = kein Limit.</span></label></div><div class=\"form-control\"><label class=\"label\"><span class=\"label-text font-semibold\">Job Queue Worker Anzahl</span></label> <input type=\"number\" name=\"job_queue_worker_count\" value=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var15 string
		templ_7745c5c3_Var15, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d", settings.JobQueueWorkerCount))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/admin_views/settings.templ`, Line: 278, Col: 61}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var15))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 27, "\" class=\"input input-bordered w-full\" placeholder=\"5\" min=\"1\" max=\"20\" required> <label class=\"label\"><span class=\"label-text-alt\">Anzahl der gleichzeitigen Background-Prozesse (1-20). Bei 5 Workern werden 5 Jobs parallel abgearbeitet - nicht nacheinander</span></label></div><!-- S3 Backup Settings --><div class=\"divider\">S3 Backup Einstellungen</div><div class=\"form-control\"><label class=\"label cursor-pointer\"><span class=\"label-text font-semibold\">S3 Backup aktivieren</span> <input type=\"checkbox\" name=\"s3_backup_enabled\" class=\"checkbox\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if settings.S3BackupEnabled {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 28, " checked")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 29, "></label> <label class=\"label\"><span class=\"label-text-alt\">Steuert global, ob S3 Backups erstellt werden (vorausgesetzt, es existiert ein aktiver S3‑Speicherpool).</span> <span class=\"label-text-alt\">Wenn deaktiviert, werden keine neuen S3‑Backups mehr eingeplant. Bereits vorhandene Backups bleiben im Bucket bestehen; ggf. bereits ausstehende (verzögerte) Backups können weiterhin verarbeitet werden. S3‑Löschjobs beim Bildlöschen sind in diesem Modus ebenfalls deaktiviert.</span></label></div><div class=\"form-control\"><label class=\"label\"><span class=\"label-text font-semibold\">S3 Backup Verzögerung (Minuten)</span></label> <input type=\"number\" name=\"s3_backup_delay_minutes\" value=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var16 string
		templ_7745c5c3_Var16, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d", settings.S3BackupDelayMinutes))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/admin_views/settings.templ`, Line: 318, Col: 62}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var16))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 30, "\" class=\"input input-bordered w-full\" placeholder=\"0\" min=\"0\" max=\"43200\" required> <label class=\"label\"><span class=\"label-text-alt\">Nach wie vielen Minuten nach dem Upload soll das S3 Backup erfolgen? 0 = sofort, 1440 = nach 24 Stunden</span></label></div><div class=\"form-control\"><label class=\"label\"><span class=\"label-text font-semibold\">S3 Backup Check Intervall (Minuten)</span></label> <input type=\"number\" name=\"s3_backup_check_interval\" value=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var17 string
		templ_7745c5c3_Var17, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d", settings.S3BackupCheckInterval))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/admin_views/settings.templ`, Line: 337, Col: 63}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var17))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 31, "\" class=\"input input-bordered w-full\" placeholder=\"5\" min=\"1\" max=\"60\" required> <label class=\"label\"><span class=\"label-text-alt\">Wie oft soll nach ausstehenden S3 Backups gesucht werden? (1-60 Minuten)</span></label></div><div class=\"form-control\"><label class=\"label\"><span class=\"label-text font-semibold\">S3 Retry Intervall (Minuten)</span></label> <input type=\"number\" name=\"s3_retry_interval\" value=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var18 string
		templ_7745c5c3_Var18, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d", settings.S3RetryInterval))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/admin_views/settings.templ`, Line: 356, Col: 57}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var18))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 32, "\" class=\"input input-bordered w-full\" placeholder=\"2\" min=\"1\" max=\"60\" required> <label class=\"label\"><span class=\"label-text-alt\">Wartezeit zwischen Wiederholungsversuchen für fehlgeschlagene S3 Backups (1-60 Minuten)</span></label></div><!-- Thumbnail Format Settings --><div class=\"divider\">Thumbnail-Format Einstellungen</div><div class=\"form-control\"><label class=\"label cursor-pointer\"><span class=\"label-text font-semibold\">Original-Format Thumbnails</span> <input type=\"checkbox\" name=\"thumbnail_original_enabled\" class=\"checkbox\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if settings.ThumbnailOriginalEnabled {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 33, " checked")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 34, "></label> <label class=\"label\"><span class=\"label-text-alt\">Generiert Thumbnails im ursprünglichen Dateiformat (JPG, PNG, etc.).</span></label></div><div class=\"form-control\"><label class=\"label cursor-pointer\"><span class=\"label-text font-semibold\">WebP-Format Thumbnails</span> <input type=\"checkbox\" name=\"thumbnail_webp_enabled\" class=\"checkbox\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if settings.ThumbnailWebPEnabled {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 35, " checked")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 36, "></label> <label class=\"label\"><span class=\"label-text-alt\">Generiert optimierte Thumbnails im WebP-Format für bessere Kompression.</span></label></div><div class=\"form-control\"><label class=\"label cursor-pointer\"><span class=\"label-text font-semibold\">AVIF-Format Thumbnails</span> <input type=\"checkbox\" name=\"thumbnail_avif_enabled\" class=\"checkbox\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if settings.ThumbnailAVIFEnabled {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 37, " checked")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 38, "></label> <label class=\"label\"><span class=\"label-text-alt\">Generiert hochoptimierte Thumbnails im AVIF-Format (erfordert FFmpeg).</span></label></div><!-- Actions --><div class=\"flex justify-end space-x-4 pt-6\"><a href=\"/admin\" class=\"btn btn-ghost\">Abbrechen</a> <button type=\"submit\" class=\"btn btn-primary\">Einstellungen speichern</button></div></form></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func Settings(settings models.AppSettings, csrfToken string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var19 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var19 == nil {
			templ_7745c5c3_Var19 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = AdminLayout(settingsContent(settings, csrfToken)).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate

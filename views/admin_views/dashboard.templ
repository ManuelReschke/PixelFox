package admin_views

import (
	"github.com/ManuelReschke/PixelFox/app/models"
	"strconv"
)

templ dashboardContent(totalUsers int, totalImages int, recentUsers []models.User, imageStats []models.DailyStats, userStats []models.DailyStats) {
	<div class="mb-8">
		<h1 class="text-3xl font-bold mb-2">Admin Dashboard</h1>
		<p class="opacity-75">Verwalte deine PixelFox-Anwendung</p>
	</div>

	<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
		<!-- Stats Card: Total Users -->
		<div class="bg-base-200 rounded-lg shadow p-6">
			<div class="flex items-center">
				<div class="p-3 rounded-full bg-blue-100 text-blue-600">
					<svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z" />
					</svg>
				</div>
				<div class="ml-4">
					<h2 class="text-sm font-medium opacity-75">Benutzer gesamt</h2>
					<p class="text-2xl font-semibold">{ strconv.Itoa(totalUsers) }</p>
				</div>
			</div>
		</div>

		<!-- Stats Card: Total Images -->
		<div class="bg-base-200 rounded-lg shadow p-6">
			<div class="flex items-center">
				<div class="p-3 rounded-full bg-green-100 text-green-600">
					<svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
					</svg>
				</div>
				<div class="ml-4">
					<h2 class="text-sm font-medium opacity-75">Bilder gesamt</h2>
					<p class="text-2xl font-semibold">{ strconv.Itoa(totalImages) }</p>
				</div>
			</div>
		</div>

		<!-- Quick Actions -->
		<div class="bg-base-200 rounded-lg shadow p-6">
			<h2 class="text-sm font-medium opacity-75 mb-4">Schnellzugriff</h2>
			<div class="space-y-2">
				<a href="/admin/users" class="flex items-center text-blue-600 hover:text-blue-800">
					<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z" />
					</svg>
					Benutzer
				</a>
				<a href="/admin/images" class="flex items-center text-green-600 hover:text-green-800">
					<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
					</svg>
					Bilder
				</a>
			</div>
		</div>
	</div>

	<!-- Charts -->
	<div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
		<!-- Image Chart -->
		<div class="bg-base-200 rounded-lg shadow p-6">
			<h2 class="text-lg font-medium mb-4">Bilder pro Tag (letzte 7 Tage)</h2>
			<div class="h-64">
				<canvas id="imageChart"></canvas>
			</div>
		</div>

		<!-- User Chart -->
		<div class="bg-base-200 rounded-lg shadow p-6">
			<h2 class="text-lg font-medium mb-4">Benutzer pro Tag (letzte 7 Tage)</h2>
			<div class="h-64">
				<canvas id="userChart"></canvas>
			</div>
		</div>
	</div>

	<!-- Recent Users -->
	<div class="bg-base-200 rounded-lg shadow overflow-hidden">
		<div class="px-6 py-4 border-b border-base-300">
			<h2 class="text-lg font-medium">Neueste Benutzer</h2>
		</div>
		<div class="divide-y divide-base-300">
			if len(recentUsers) == 0 {
				<div class="px-6 py-4 opacity-75 text-center">Keine Benutzer gefunden</div>
			} else {
				for _, user := range recentUsers {
					<div class="px-6 py-4">
						<div class="flex items-center">
							<div class="flex-shrink-0">
								<div class="h-10 w-10 rounded-full bg-base-300 flex items-center justify-center opacity-75">
									{ string(user.Name[0]) }
								</div>
							</div>
							<div class="ml-4">
								<div class="text-sm font-medium">{ user.Name }</div>
								<div class="text-sm opacity-75">{ user.Email }</div>
							</div>
							<div class="ml-auto">
								<span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
									{ user.Role }
								</span>
							</div>
						</div>
					</div>
				}
			}
		</div>
	</div>

	<!-- JSON-Daten für Charts -->
	@templ.JSONScript("imageStatsData", imageStats)
	@templ.JSONScript("userStatsData", userStats)

	<script>
		// Ensure Chart.js loader function exists globally
		if (typeof window._loadChartJs === 'undefined') {
			window._loadChartJs = function(callback){
				if(window.Chart){ callback(); return; }
				var s=document.createElement('script');
				s.src='https://cdn.jsdelivr.net/npm/chart.js';
				s.onload=callback;
				document.head.appendChild(s);
			}
		}

		// Globale Variablen für die Charts (use window to avoid redeclaration)
		if (typeof window.imageChart === 'undefined') {
			window.imageChart = null;
		}
		if (typeof window.userChart === 'undefined') {
			window.userChart = null;
		}

		function buildCharts(){
			try {
				// Check if Chart.js is loaded
				if (!window.Chart) {
					setTimeout(buildCharts, 100);
					return;
				}

				// Daten aus den JSON-Skripten laden
				const imageStatsElement = document.getElementById('imageStatsData');
				const userStatsElement = document.getElementById('userStatsData');
				
				if (!imageStatsElement || !userStatsElement) {
					setTimeout(buildCharts, 100);
					return;
				}

				const imageStats = JSON.parse(imageStatsElement.textContent);
				const userStats = JSON.parse(userStatsElement.textContent);

				const imageData = {
					labels: imageStats.map(stat => stat.date),
					datasets: [{
						label: 'Bilder',
						data: imageStats.map(stat => stat.count),
						backgroundColor: 'rgba(34,197,94,.6)',
						borderColor: 'rgba(34,197,94,1)',
						borderWidth: 1
					}]
				};

				const userData = {
					labels: userStats.map(stat => stat.date),
					datasets: [{
						label: 'Benutzer',
						data: userStats.map(stat => stat.count),
						backgroundColor: 'rgba(59,130,246,.6)',
						borderColor: 'rgba(59,130,246,1)',
						borderWidth: 1
					}]
				};

				const chartOptions = {
					responsive: true,
					maintainAspectRatio: false,
					scales: {
						y: {
							beginAtZero: true,
							ticks: {
								precision: 0
							}
						}
					},
					plugins: {
						legend: {
							display: true
						}
					}
				};

				// Create image chart
				const imageCtx = document.getElementById('imageChart');
				if (imageCtx) {
					if (window.imageChart && typeof window.imageChart.destroy === 'function') {
						window.imageChart.destroy();
					}
					window.imageChart = new Chart(imageCtx.getContext('2d'), {
						type: 'bar',
						data: imageData,
						options: chartOptions
					});
				}

				// Create user chart
				const userCtx = document.getElementById('userChart');
				if (userCtx) {
					if (window.userChart && typeof window.userChart.destroy === 'function') {
						window.userChart.destroy();
					}
					window.userChart = new Chart(userCtx.getContext('2d'), {
						type: 'bar',
						data: userData,
						options: chartOptions
					});
				}

			} catch (error) {
				console.error('Error building charts:', error);
				// Retry after a short delay
				setTimeout(buildCharts, 500);
			}
		}

		function initCharts() {
			window._loadChartJs(buildCharts);
		}

		// Initialize charts when DOM is ready
		if (document.readyState === 'loading') {
			document.addEventListener('DOMContentLoaded', initCharts);
		} else {
			// DOM already loaded
			initCharts();
		}

		// Re-initialize charts after HTMX updates
		document.addEventListener('htmx:afterSettle', function(evt) {
			if (document.getElementById('imageChart')) {
				initCharts();
			}
		});
	</script>
}

templ Dashboard(totalUsers int, totalImages int, recentUsers []models.User, imageStats []models.DailyStats, userStats []models.DailyStats) {
	@AdminLayout(dashboardContent(totalUsers, totalImages, recentUsers, imageStats, userStats))
}
